angular.module("angularCustom", []).config(["$provide", function(a) {
    a.decorator("$timeout", ["$delegate", "$interval", "$window", "$q", "$rootScope", function(a, c, d, e, f) {
        var g = {};
        a = function(a, b, c) {
            var k = d.setInterval
              , l = d.clearInterval
              , n = e.defer()
              , m = n.promise
              , o = angular.isDefined(c) && !c;
            m.then(null , null , a);
            m.$$intervalId = k(function() {
                n.resolve(a());
                l(m.$$intervalId);
                delete g[m.$$intervalId];
                o || f.$apply()
            }
            , b);
            g[m.$$intervalId] = n;
            return m
        }
        ;
        a.cancel = function(a) {
            return a && a.$$intervalId in g ? (g[a.$$intervalId].reject("canceled"),
            clearInterval(a.$$intervalId),
            delete g[a.$$intervalId],
            !0) : !1
        }
        ;
        return a
    }
    ])
}
]);
"use strict";
angular.module("cas").constant("appConfig", {
    enableLogging: !0
}).config(["$provide", "appConfig", function(a, b) {
    a.decorator("$log", ["$delegate", "$sniffer", function(a) {
        b.enableLogging || (a.error = function() {}
        ,
        a.info = function() {}
        ,
        a.log = function() {}
        ,
        a.warn = function() {}
        ,
        a.debug = function() {}
        );
        return a
    }
    ])
}
]).config(["$stateProvider", "$routeProvider", "$urlRouterProvider", function(a, b, c) {
    c.otherwise("/");
    a.state("login", {
        url: "/",
        templateUrl: "views/loginAlias",
        controller: "LoginCtrl"
    }).state("error", {
        url: "/e",
        templateUrl: "views/loginError",
        controller: "LoginErrorCtrl"
    }).state("startup", {
        url: "/s",
        templateUrl: "views/loginStartup",
        controller: "LoginStartupCtrl"
    }).state("blocked", {
        url: "/b",
        templateUrl: "views/loginBlocked",
        controller: "LoginBlockedCtrl"
    }).state("closed", {
        url: "/c",
        templateUrl: "views/loginClosed",
        controller: "LoginBlockedCtrl"
    }).state("newPassword", {
        url: "/n",
        templateUrl: "views/loginNewPassword",
        controller: "LoginNewPasswordCtrl"
    }).state("P", {
        url: "/p",
        templateUrl: "views/loginPassword",
        controller: "LoginPasswordCtrl"
    }).state("M",
    {
        url: "/m",
        templateUrl: "views/loginMask",
        controller: "LoginMaskCtrl"
    })
}
]).config(["$httpProvider", function(a) {
    a.responseInterceptors.push(["$q", "$injector", "$rootScope", function(a, c) {
        function d() {
            g = g || c.get("$http");
            1 > g.pendingRequests.length && (h = h || c.get("requestNotificationChannel"),
            h.requestEnded())
        }
        function e(a) {
            d();
            return a
        }
        function f(c) {
            d();
            var e;
            e = (e = j[c.status]) ? e.call(null , c) : void 0;
            return e && void 0 != e ? e : a.reject(c)
        }
        var g, h, i, j = {
            401: function(a) {
                i = i || c.get("userDialogService");
                i.addMessage({
                    type: "error",
                    viewValue: k(a.data)
                })
            }
        };
        j[500] = j[503] = function(a) {
            a = a.data.error ? a.data.error : k(a.data);
            i = i || c.get("userDialogService");
            i.addMessage({
                type: "error",
                viewValue: a
            })
        }
        ;
        var k = function(a) {
            try {
                return JSON.parse(a)
            } catch (b) {
                return a
            }
        }
        ;
        return function(a) {
            return a.then(e, f)
        }
    }
    ])
}
]).run(["$rootScope", "$state", "$stateParams", "$csfModalConfig", "$csfModal", function(a, b, c, d, e) {
    a.formats = {
        date: "yyyy-MM-dd"
    };
    a.$state = b;
    a.$stateParams = c;
    d.state("security", {
        templateUrl: "views/modals/securityModal",
        controller: "SecurityModalCtrl"
    }).state("contact",
    {
        templateUrl: "views/modals/contactModal",
        controller: "ContactModalCtrl"
    }).state("news", {
        templateUrl: "views/modals/newsModal",
        controller: "NewsModalCtrl"
    }).state("atmBranches", {
        templateUrl: "views/modals/atmBranchesModal",
        controller: "AtmBranchesModalCtrl"
    }).state("currencies", {
        templateUrl: "views/modals/exchangeRateModal",
        controller: "ExchangeRateModalCtrl"
    }).state("help", {
        templateUrl: "views/modals/helpModal",
        controller: "HelpModalCtrl"
    }).state("newMessage", {
        templateUrl: "views/modals/newMessageModal",
        controller: "NewMessageModalCtrl"
    });
    a.$csfModal = e
}
]).run(["$rootScope", "$log", "userDialogService", function(a, b, c) {
    a.$on("$stateChangeSuccess", function() {
        c.popMessages()
    }
    )
}
]).run(["$http", "requestNotificationChannel", function(a, b) {
    a.defaults.transformRequest.push(function(a) {
        b.requestStarted();
        return a
    }
    );
    a.defaults.transformResponse.push(function(a) {
        return a
    }
    )
}
]);
"use strict";
angular.module("cas").config(["$stateProvider", function(a) {
    a.state("TO", {
        url: "/to",
        templateUrl: "views/loginTokenOTP",
        controller: "LoginTokenOTPCtrl"
    })
}
]).run(["$locale", function(a) {
    a.NUMBER_FORMATS.GROUP_SEP = ".";
    a.NUMBER_FORMATS.DECIMAL_SEP = ","
}
]);
"use strict";
angular.module("arrayFilters").filter("unique", function() {
    return function(a, b) {
        return _.uniq(a, function(a) {
            return void 0 !== a[b] ? a[b] : a
        }
        )
    }
}
).filter("jsonSearch", ["$filter", function(a) {
    return function(b, c, d) {
        if (!b || !c)
            return !1;
        var e = !1;
        d = d ? d : "dd MMM yyyy";
        c = c.toLowerCase();
        for (var f = 0, g = b.length; f < g && !1 === e; f++)
            e = "date" === b[f].type ? -1 != a("date")(b[f].value, d).toLowerCase().indexOf(c) : -1 != b[f].value.toLowerCase().indexOf(c);
        return e
    }
}
]);
"use strict";
angular.module("commonServices").service("arrayUtils", [function() {
    this.clear = function(a) {
        a.length = 0
    }
    ;
    this.addAll = function(a, b) {
        for (var c = 0, d = b.length; c < d; c++)
            a.push(b[c])
    }
    ;
    this.arrayToMapByField = function(a, b) {
        var c = {};
        if (a)
            for (var d = 0, e = a.length; d < e; d++) {
                var f = a[d];
                c[f[b]] = f
            }
        return c
    }
    ;
    this.prepareObjectArray = function(a, b) {
        for (var c = [], d = 0, e = a.length; d < e; d++) {
            var f = {};
            f[b] = a[d];
            c.push(f)
        }
        return c
    }
}
]);
"use strict";
angular.module("commonControllers").controller("AtmBranchesModalCtrl", ["$scope", "$log", "$filter", "locationsService", "$q", "dictionaryProvider", function(a, b, c, d, e, f) {
    function g(b) {
        for (var c = a.getCenter(), d = 0, e = b.length; d < e; d++)
            b[d].distance = google.maps.geometry.spherical.computeDistanceBetween(b[d].$LatLng, c)
    }
    a.TYPE_ALL = "";
    a.TYPE_ATM = "A";
    a.TYPE_BRANCH = "B";
    a.TYPE_BRANCH_ATM = "AB";
    a.allMarkers = [];
    var h = [];
    a.filteredMarkers = [];
    a.mapMarkers = [];
    a.listMarkers = [];
    a.addresses = [];
    a.initialized = !1;
    a.filter = {
        query: "",
        type: a.TYPE_ALL
    };
    a.carouselApi = {
        active: null
    };
    a.currencies = f.getDictionary("D_CSF_CURRENCIES");
    var i = !1, j, k, l = [], n = function(b, d) {
        if (b !== d) {
            var e = q(a.filteredMarkers, {
                type: a.filter.type
            });
            g(e);
            a.listMarkers = c("orderBy")(e, "distance");
            a.mapMarkers = a.listMarkers
        }
    }
    ;
    a.getCenter = {};
    a.locations = [];
    a.mapOptions = {
        zoom: 6
    };
    a.isBranch = function(b) {
        return b === a.TYPE_BRANCH || b === a.TYPE_BRANCH_ATM
    }
    ;
    a.locationClick = function(b, c) {
        i = !0;
        k && k !== b && m();
        a.mapOptions.center = {
            latitude: b.latitude,
            longitude: b.longitude
        };
        c &&
        a.isBranch(b.type) && (b.flipped = !b.flipped);
        b.active = !0;
        if (b !== k)
            for (var d = 0, e = a.mapMarkers.length; d < e; d++) {
                var f = a.mapMarkers[d];
                f !== b && (f.latitude === b.latitude && f.longitude === b.longitude) && (l.push(f),
                f.active = !0)
            }
        k = b
    }
    ;
    a.onMarkerClick = function(b) {
        a.locationClick(b);
        a.listMarkers.some(function(c) {
            if (c.latitude === b.latitude && c.longitude === b.longitude)
                return a.carouselApi.active = c,
                !0
        }
        )
    }
    ;
    var m = function() {
        if (k && (k.active = !1,
        k.flipped = !1,
        k = null ,
        l && 0 < l.length)) {
            for (var a = 0, b = l.length; a < b; a++)
                l[a].active =
                !1;
            l = []
        }
    }
      , o = d.getLocations();
    o.then(function(b) {
        a.allMarkers = b.data;
        b = a.allMarkers.length;
        for (var c = 0; c < b; c++) {
            var d = a.allMarkers[c];
            if (d.type === a.TYPE_BRANCH || d.type === a.TYPE_BRANCH_ATM) {
                for (var e = d, f = e.currencies ? e.currencies.split(",") : [], g = "", i = 0, j = f.length; i < j; i++)
                    var k = a.currencies[f[i].trim()]
                      , g = g + (k.prefix.trim() + k.suffix.trim() + " ");
                e.ccySymbols = g
            }
            d.$LatLng = new google.maps.LatLng(d.latitude,d.longitude);
            h.push(d.longitude)
        }
        a.filteredMarkers = a.allMarkers;
        navigator.geolocation && navigator.geolocation.getCurrentPosition(function(b) {
            a.mapOptions.center =
            {
                latitude: b.coords.latitude,
                longitude: b.coords.longitude
            };
            a.mapOptions.zoom = 14
        }
        );
        a.$watch("filter.type", n)
    }
    );
    a.onBoundsChanged = function(b) {
        j = b;
        i || (o.then(function() {
            var d = b.getSouthWest()
              , e = b.getNorthEast()
              , f = _.sortedIndex(h, d.lng())
              , i = _.sortedIndex(h, e.lng())
              , j = [];
            if (f <= a.allMarkers.length && i <= a.allMarkers.length)
                for (; f <= i; f++)
                    f in a.allMarkers && (d.lat() <= a.allMarkers[f].latitude && e.lat() >= a.allMarkers[f].latitude) && j.push(a.allMarkers[f]);
            a.filteredMarkers = j;
            d = q(a.filteredMarkers, {
                type: a.filter.type
            });
            g(d);
            a.listMarkers = c("orderBy")(d, "distance");
            a.mapMarkers = a.listMarkers
        }
        ),
        a.$apply(),
        m());
        i = !1
    }
    ;
    var q = c("filter")
      , r = new google.maps.places.AutocompleteService;
    a.getLocations = function(b, c) {
        var d = e.defer();
        if (b)
            return r.getPlacePredictions({
                input: b,
                types: ["geocode"],
                bounds: j
            }, function(b) {
                a.locations = b;
                c && angular.element("#atmBranchesInput").click();
                d.resolve(b)
            }
            ),
            d.promise;
        d.resolve([])
    }
    ;
    var s = new google.maps.places.PlacesService(angular.element("\x3cdiv\x3e\x3c/div\x3e")[0]);
    a.onAddressSelect = function(c) {
        s.getDetails({
            reference: c.reference
        },
        function(c, d) {
            d === google.maps.places.PlacesServiceStatus.OK && (c.geometry.viewport ? a.mapOptions.bounds = c.geometry.viewport : c.geometry.location ? (a.mapOptions.center = {
                latitude: c.geometry.location.lat(),
                longitude: c.geometry.location.lng()
            },
            a.mapOptions.zoom = 13) : b.warn("No viewport or location of the place"),
            a.$apply())
        }
        )
    }
    ;
    a.$on("$csfModalLoaded", function() {
        a.initialized = !0
    }
    );
    a.centerOnLocation = function() {
        navigator.geolocation && navigator.geolocation.getCurrentPosition(function(b) {
            a.mapOptions.center = {
                latitude: b.coords.latitude,
                longitude: b.coords.longitude
            };
            a.mapOptions.zoom = 13
        }
        )
    }
}
]);
"use strict";
angular.module("commonServices").service("bigDecimal", function() {
    this.parse = function(a, b) {
        return null  == a || void 0 == a || "" == a ? "" : Big.eval(a, b)
    }
    ;
    this.plus = function(a, b) {
        return Big(a).plus(Big(b)).valueOf()
    }
    ;
    this.abs = function(a) {
        return Big(a).abs().valueOf()
    }
    ;
    this.minus = function(a, b) {
        return Big(a).minus(Big(b)).valueOf()
    }
    ;
    this.times = function(a, b) {
        return Big(a).times(Big(b)).valueOf()
    }
    ;
    this.div = function(a, b) {
        return Big(a).div(Big(b)).valueOf()
    }
    ;
    this.sum = function(a) {
        for (var b = Big(0), c = 0; c < a.length; c++)
            b =
            b.plus(Big(a[c]));
        return b.valueOf()
    }
    ;
    this.avg = function(a) {
        return Big(this.sum(a)).div(Big(a.length)).valueOf()
    }
    ;
    this.compare = function(a, b) {
        if (isNaN(a) || isNaN(b))
            throw Error(a + " - " + b);
        if (a instanceof Big && b instanceof Big)
            return a < b ? -1 : a > b ? 1 : 0;
        throw new TypeError(a + " - " + b);
    }
    ;
    this.eval = function(a, b) {
        return Big.eval(a, b).valueOf()
    }
    ;
    this.round = function(a, b) {
        return Big(a).round(b).valueOf()
    }
}
);
"use strict";
angular.module("commonServices").service("captchaService", ["csfUtils", function(a) {
    var b = null ;
    this.getCaptcha = function(a) {
        return "captcha?" + b + "\x26suffix\x3d" + a
    }
    ;
    this.reloadCaptcha = function() {
        b = a.getCurrentTime()
    }
}
]);
"use strict";
angular.module("commonServices").service("chartUtils", ["$filter", "bigDecimal", function(a, b) {
    this.round = function(a) {
        var b = a + "";
        a = "-" === b[0];
        var c = b[0 + a]
          , b = b.slice(1 + a);
        1 * b && (c = 1 * c + 1);
        return c * Math.pow(10, b.split(".")[0].length) * (a ? -1 : 1)
    }
    ;
    this.decreaseBrightness = function(a, b) {
        var c = parseInt(a.substr(1, 2), 16)
          , d = parseInt(a.substr(3, 2), 16)
          , i = parseInt(a.substr(5, 2), 16);
        return "#" + (0 | 256 + c * (100 - b) / 100).toString(16).substr(1) + (0 | 256 + d * (100 - b) / 100).toString(16).substr(1) + (0 | 256 + i * (100 - b) / 100).toString(16).substr(1)
    }
    ;
    this.increaseBrightness = function(a, b) {
        a = a.replace(/^\s*#|\s*$/g, "");
        3 === a.length && (a = a.replace(/(.)/g, "$1$1"));
        var c = parseInt(a.substr(0, 2), 16)
          , d = parseInt(a.substr(2, 2), 16)
          , i = parseInt(a.substr(4, 2), 16);
        return "#" + (0 | 256 + c + (256 - c) * b / 100).toString(16).substr(1) + (0 | 256 + d + (256 - d) * b / 100).toString(16).substr(1) + (0 | 256 + i + (256 - i) * b / 100).toString(16).substr(1)
    }
    ;
    this.parseDate = d3.time.format("%Y-%m-%d").parse;
    this.getSize = function(a, b) {
        return a.style(b).slice(0, -2)
    }
    ;
    this.chartWidthChanged = function(a, b) {
        return parseInt(this.getSize(a,
        "width")) !== b
    }
    ;
    this.getDataMarkForPosition = function(a, b, c, d, i) {
        i = i ? a.length - 2 : a.length - 1;
        for (d = d ? 1 : 0; d < i; d++) {
            var j = c(a[d].date)
              , k = c(a[d + 1].date);
            if (b >= j && b < k || b < j)
                return d;
            if (d === i - 1 && b >= k)
                return i
        }
    }
    ;
    this.getSavingsProductColor = function(a) {
        if ("S" === a)
            return "#86B03E";
        if ("D" === a)
            return "#932A63";
        if ("SM" === a)
            return "#205E5E"
    }
    ;
    this.getIOweSummaryGroupColor = function(a) {
        if ("TYPE_REPAID" === a)
            return "#86B03E";
        if ("TYPE_TO_REPAY" === a)
            return "#932A63";
        if ("TYPE_DUE" === a)
            return "#98D8E9";
        if ("SM" === a)
            return "#205E5E"
    }
    ;
    var c = {
        S: "isave.overview.donutChart.savings",
        D: "isave.overview.donutChart.deposits"
    }
      , d = {
        TYPE_REPAID: "iowe.overview.donutChart.repaid",
        TYPE_TO_REPAY: "iowe.overview.donutChart.toRepay",
        TYPE_DUE: "iowe.overview.donutChart.due"
    };
    this.getProductDescriptionCode = function(a, b) {
        if ("ISAVE" === a)
            return c[b];
        if ("IOWE" === a)
            return d[b]
    }
    ;
    this.applyColor = function(a, b) {
        for (var c = b || "children", d = a.subcategories_colors.split(";"), i = d.length, j = 0, k = a[c].length; j < k; j++)
            a[c][j].color = j < i ? d[j] : this.decreaseBrightness(d[i -
            1], 10 * (j + 1) - 5)
    }
    ;
    this.rgb2hex = function(a) {
        function b(a) {
            return ("0" + parseInt(a).toString(16)).slice(-2)
        }
        var c = a.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+))?\)$/);
        return c ? "#" + b(c[1]) + b(c[2]) + b(c[3]) : a
    }
    ;
    this.buildAmount = function(a, b, c) {
        a.append("span").attr("class", "currency").text(function(a) {
            return b(a) && a.ccy.prefix ? a.ccy.prefix : ""
        }
        );
        a.append("span").attr("csf-amount", c);
        a.append("span").attr("class", "currency").text(function(a) {
            return b(a) && a.ccy.suffix ? " " + a.ccy.suffix : ""
        }
        )
    }
    ;
    this.buildSvgAmount =
    function(c, d, g, h, i, j) {
        function k(a) {
            h && a.attr("x", function(b, c) {
                void 0 === b.offset && (b.offset = j ? 0 : h(b, a[0][c]));
                var d = h(b, a[0][c]) - b.offset;
                b.offset += a[0][c].getComputedTextLength() + 1;
                return j ? d : b.offset
            }
            );
            i && a.attr("y", function(b, c) {
                return i(b, a[0][c])
            }
            )
        }
        var l = [function() {
            c.append("tspan").attr("class", "currency").text(function(a) {
                return d(a) && a.ccy.prefix ? a.ccy.prefix : ""
            }
            ).call(k)
        }
        , function() {
            c.append("tspan").attr("class", "amount").text(function(c) {
                var d = g(c);
                if (d !== c)
                    return d;
                c = b.abs(c.value);
                c = Math.floor(c);
                return a("absAmount")(c, 0)
            }
            ).call(k)
        }
        , function() {
            c.append("tspan").attr("class", "decimal-amount").text(function(c) {
                if (g(c) !== c)
                    return "";
                c = b.abs(c.value);
                var d = Math.floor(c);
                c = b.parse(c).valueOf() - b.parse(d).valueOf();
                return a("absAmount")(c).substring(1)
            }
            ).call(k)
        }
        , function() {
            c.append("tspan").attr("class", "currency").text(function(a) {
                return d(a) && a.ccy.suffix ? " " + a.ccy.suffix : ""
            }
            ).call(k)
        }
        ];
        if (j)
            for (var n = l.length - 1; 0 <= n; n--)
                l[n]();
        else
            for (var n = 0, m = l.length; n < m; n++)
                l[n]()
    }
    ;
    this.buildSimpleSvgAmount =
    function(c, d, g) {
        var h = b.abs(d);
        d = Math.floor(h);
        h = b.parse(h).valueOf() - b.parse(d).valueOf();
        h = a("absAmount")(h);
        g.prefix && c.append("tspan").attr("class", "currency").text(g.prefix);
        c.append("tspan").attr("class", "amount").text(a("absAmount")(d, 0));
        c.append("tspan").attr("class", "decimal-amount").text(h.substring(1));
        g.suffix && c.append("tspan").attr("class", "currency").text(" " + g.suffix)
    }
}
]);
angular.module("commonConfig").constant("modules", {
    iHave: "ihave",
    iSave: "isave",
    iOwe: "iowe",
    limits: "limits",
    newSavingProduct: "newSavingProduct"
}).constant("componentCodes", {
    iHave: "IHAVE_PRODUCT_NAVIGATOR",
    iSave: "ISAVE_PRODUCT_NAVIGATOR",
    iOwe: "IOWE_PRODUCT_NAVIGATOR",
    iHaveMoneyToPayBack: "IHAVE_MONEY_TO_PAYBACK",
    iSaveNewSavingStoryInitialPayment: "NEW_SAVINGS_STORY_INITIAL_PAYMENT_FROM_ACCOUNT",
    iSaveNewSavingStorySavingsGoalSo: "NEW_SAVINGS_STORY_SAVINGS_GOAL_SO_FROM_ACCOUNT",
    iSaveNewSavingStorySavingsGoalInitialPayment: "NEW_SAVINGS_STORY_SAVINGS_GOAL_INTERNAL_TRANSFER_FROM_ACCOUNT",
    iSaveDepositData: "DEPOSIT_DATA_TO_RETURN_ACCOUNT"
}).constant("productTemplateCategories", {
    deposit: "D",
    savingsAccount: "S"
}).constant("payeeDataKinds", {
    ACCOUNT: "A",
    PHONE: "P",
    EMAIL: "E",
    FACEBOOK: "F",
    MOBILE: "M"
}).constant("paymentTypes", {
    DOMESTIC: "DOMESTIC",
    INTERNAL: "INTERNAL",
    FOREIGN: "FOREIGN",
    BULK: "BULK",
    TOP_UP_PHONE: "TOP_UP_PHONE"
}).constant("paymentTypesValue", {
    SMART: "S",
    DOMESTIC: "D",
    INTERNAL: "I",
    FOREIGN: "F"
}).constant("paymentValueTypes", {
    D: "DOMESTIC",
    F: "FOREIGN",
    I: "INTERNAL"
}).constant("productGroupsForLinks",
{
    ACCOUNT: "A",
    CARD: "C",
    STANDING_ORDER: "SO"
}).constant("paymentKinds", {
    PAYMENT: "PAYMENT",
    STANDING_ORDER: "STANDING_ORDER",
    SERIES_TRANSFER: "SERIES_TRANSFER"
}).constant("paymentStatus", {
    NEW: "NEW",
    PENDING: "PENDING",
    ACCEPTED: "ACCEPTED",
    REJECTED: "REJECTED",
    DELETE_PENDING: "DELETE_PENDING",
    DELETED: "DELETED"
}).constant("paymentSubstatus", {
    EDIT: "EDIT",
    DELETED_AFTER_SEND: "DELETED_AFTER_SEND"
}).constant("clientSegment", {
    BC: "BC",
    PI: "PI",
    M: "M"
}).constant("smartCalendarEntryType", {
    STANDING_ORDER_TYPE: "S",
    FUTURE_TRANSACTION_TYPE: "F",
    TERM_DEPOSIT_TYPE: "TD",
    DIRECT_DEBIT_TYPE: "DD",
    FEE_TYPE: "FS",
    LOAN_CREDIT_REPAYMENT_TYPE: "LR",
    CREDIT_CARD_REPAYMENT_TYPE: "CR"
}).constant("smartCalendarActions", {
    EDIT: "EDIT",
    REPEAT: "REPEAT",
    DELETE: "DELETE",
    BREAK: "BREAK"
}).constant("accountNumberFormats", {
    IBAN: "IBAN"
}).constant("deviceStatuses", {
    NEW: "NEW",
    ACTIVE: "ACTIVE",
    DELETED: "DELETED",
    BLOCKED: "BLOCKED"
}).constant("processSteps", {
    EDIT: "EDIT",
    CONFIRMATION: "CONFIRMATION",
    DETAILS: "DETAILS"
});
angular.module("formatFilters").config(["dateTypeValues", function(a) {
    angular.extend(a, {
        DICTIONARY: "yyyy-MM-dd"
    })
}
]);
angular.module("commonServices").factory("commonSorter", ["dataSorter", function(a) {
    return a.create({}, {
        string: "stringSorter",
        number: "numberSorter"
    })
}
]);
"use strict";
angular.module("commonServices").service("communicationService", ["$http", "httpService", function(a, b) {
    this.getMessageThreads = function(a) {
        a && b.clearCacheRegion("communicationService");
        return b.get("communication/messageThreads", "communicationService")
    }
    ;
    this.deleteMessageThread = function(a) {
        return b({
            url: "communication/messageThreads/" + a,
            method: "DELETE"
        })
    }
    ;
    this.getUnreadMessagesCount = function() {
        return b.get("communication/messageThreads/count", "communicationService", !1, !0)
    }
    ;
    this.invalidate = function() {
        b.clearCacheRegion("communicationService")
    }
    ;
    this.getMessageThread = function(a) {
        return b.get("communication/messageThreads/" + a, "communicationService")
    }
    ;
    this.sendMessage = function(a) {
        return b.post("communication/newMessage", a)
    }
    ;
    this.getLatestMessage = function() {
        return b.get("communication/latestMessage", "communicationService")
    }
}
]);
"use strict";
angular.module("commonDirectives").directive("csfAmount", ["$filter", "bigDecimal", function(a, b) {
    return {
        restrict: "EA",
        templateUrl: "static/templates/csf-amount.html",
        replace: !0,
        scope: {
            csfAmount: "\x3d",
            csfCurrency: "\x3d",
            csfHugeAmountFormat: "\x3d"
        },
        link: function(c) {
            c.integerPartFormat = "";
            c.decimalPartFormat = "";
            c.amountIsHuge = !1;
            c.$watch("csfAmount", function(d) {
                if (void 0 != d) {
                    var e = b.abs(d);
                    d = Math.floor(e);
                    c.integerPartFormat = a("absAmount")(d, 0);
                    e = b.parse(e).valueOf() - b.parse(d).valueOf();
                    e = a("absAmount")(e);
                    c.decimalPartFormat = e.substring(1);
                    c.amountIsHuge = 1E6 < d && c.csfHugeAmountFormat ? !0 : !1
                } else
                    c.integerPartFormat = "",
                    c.decimalPartFormat = "",
                    c.amountIsHuge = !1
            }
            )
        }
    }
}
]);
angular.module("commonDirectives").directive("csfAnimate", ["$timeout", "$animate", function(a, b) {
    return {
        restrict: "A",
        scope: {
            timeoutTime: "@",
            callback: "\x3d",
            animateClass: "@",
            hideClass: "@"
        },
        link: function(c, d) {
            var e = a(function() {
                b.addClass(d, c.animateClass, function() {
                    b.addClass(d, c.hideClass);
                    c.callback()
                }
                )
            }
            , c.timeoutTime);
            c.$on("$destroy", function() {
                a.cancel(e)
            }
            )
        }
    }
}
]);
"use strict";
angular.module("commonDirectives").directive("csfBackgroundImage", function() {
    return {
        restrict: "EA",
        scope: {
            csfBackgroundImage: "\x3d"
        },
        link: function(a, b) {
            a.$watch("csfBackgroundImage", function(a) {
                a && b.css({
                    "background-image": "url(" + a + ")"
                })
            }
            )
        }
    }
}
);
angular.module("commonDirectives").controller("CarouselCtrl", ["$scope", "$filter", function(a, b) {
    var c = 0
      , d = 0
      , e = []
      , f = !1;
    a.currentIndex = function() {
        return c
    }
    ;
    a.slidesLength = function() {
        return d
    }
    ;
    this.addSlide = function(b) {
        e.push(b);
        c = 0;
        b.slideStyle = a.slideStyle;
        d++
    }
    ;
    this.removeSlide = function(a) {
        a = e.indexOf(a);
        -1 < a && e.splice(a, 1);
        d--;
        c = 0
    }
    ;
    this.sort = function() {
        e = b("orderBy")(e, "sortProperty")
    }
    ;
    this.goTo = function(b) {
        if (c > b)
            for (var d = b; d < c; d++)
                e[d].slideStyle = a.slideStyle;
        else
            for (d = c; d < b; d++)
                e[d].slideStyle =
                a.hiddenStyle;
        c = b
    }
    ;
    a.next = function() {
        f && g();
        if (d > a.slidesNumber && c + a.slidesNumber < d) {
            for (var b = parseInt(c) + a.stepsNumber, i = c; i < b; i++)
                e[i].slideStyle = a.hiddenStyle;
            c = b
        }
    }
    ;
    a.prev = function() {
        f && g();
        if (d > a.slidesNumber && 0 < c) {
            for (var b = parseInt(c) - a.stepsNumber, i = b; i < c; i++)
                e[i].slideStyle = a.slideStyle;
            c = b
        }
    }
    ;
    this.disableAnimation = function() {
        a.element.removeClass("animate");
        f = !0
    }
    ;
    var g = function() {
        a.element.addClass("animate");
        f = !1
    }
}
]).directive("csfCarousel", function() {
    return {
        restrict: "EA",
        transclude: !0,
        replace: !0,
        controller: "CarouselCtrl",
        templateUrl: "static/templates/csf-carousel.html",
        scope: {
            slidesOnPage: "@",
            vertical: "@",
            step: "@",
            controlApi: "\x3d"
        },
        compile: function() {
            return {
                pre: function(a, b, c, d) {
                    a.stepsNumber = a.step ? parseInt(a.step) : 1;
                    a.slidesNumber = parseInt(a.slidesOnPage);
                    a.controlApi && (a.controlApi.goTo = d.goTo,
                    a.controlApi.disableAnimation = d.disableAnimation,
                    a.controlApi.sort = d.sort);
                    c = a.vertical ? {
                        height: "0%",
                        border: "0px"
                    } : {
                        width: "0%",
                        border: "0px"
                    };
                    a.hiddenStyle = c;
                    c = a.vertical ? {
                        height: 100 /
                        a.slidesNumber + "%"
                    } : {
                        width: 100 / a.slidesNumber + "%"
                    };
                    a.slideStyle = c;
                    a.element = b
                }
            }
        }
    }
}
).directive("csfCarouselSlide", function() {
    return {
        require: "^csfCarousel",
        restrict: "EA",
        transclude: !0,
        replace: !0,
        templateUrl: "static/templates/csf-carousel-slide.html",
        scope: {
            sortProperty: "\x3d"
        },
        link: function(a, b, c, d) {
            d.addSlide(a);
            a.$on("$destroy", function() {
                d.removeSlide(a)
            }
            )
        }
    }
}
);
angular.module("commonDirectives").directive("csfClearInput", ["$position", function(a) {
    return {
        restrict: "A",
        require: "ngModel",
        link: function(b, c, d) {
            c.after('\x3ca class\x3d"clear-button"\x3e \x26times;\x3c/a\x3e');
            a.position(c);
            var e = angular.element(c.next());
            e.bind("mousedown", function(a) {
                c.val("");
                c.triggerHandler("input");
                a.preventDefault()
            }
            );
            b.$watch(d.ngModel, function(a) {
                a && 0 < a.length ? e.css("display", "") : e.css("display", "none")
            }
            )
        }
    }
}
]);
angular.module("commonDirectives").directive("csfClickWithStopEvent", [function() {
    return {
        restrict: "A",
        scope: {
            csfClickWithStopEvent: "\x26"
        },
        link: function(a, b) {
            b.bind("click", function(b) {
                var d;
                b.target ? d = b.target : b.srcElement && (d = b.srcElement);
                d && ("A" == d.nodeName || "A" == d.parentElement.nodeName || "B" == d.nodeName || "B" == d.parentElement.nodeName) ? b.stopPropagation() : a.$eval(a.csfClickWithStopEvent)
            }
            )
        }
    }
}
]);
"use strict";
angular.module("commonDirectives").directive("csfDatePicker", ["$rootScope", "csfUtils", "$filter", "dateUtils", "$timeout", function(a, b, c, d, e) {
    var f = function(a, c) {
        b.isHoliday(c) && (a.classes += " date-holiday ",
        a.enabled = !1)
    }
      , g = function(a) {
        var b = {
            classes: ""
        };
        f(b, a);
        return b
    }
      , h = function(a, b, c) {
        var d = g(a);
        f(d, a);
        b && c && (a = a.valueOf(),
        a >= b.valueOf() && a <= c.valueOf() && (d.classes += " range "));
        return d
    }
    ;
    return {
        restrict: "A",
        require: ["ngModel", "^?csfDateRangePicker"],
        scope: {
            ngModel: "\x3d",
            onDateSelected: "\x26",
            startDate: "\x3d",
            endDate: "\x3d",
            disableWeekends: "@",
            onDateSelectedParams: "\x26"
        },
        link: function(b, c, f, l) {
            e(function() {
                var e = !0
                  , m = l[0]
                  , o = {
                    format: a.formats.date.toLowerCase(),
                    weekStart: 1,
                    autoclose: !0,
                    beforeShowDay: g,
                    keyboardNavigation: !1,
                    startDate: b.startDate,
                    endDate: b.endDate,
                    forceParse: !1,
                    daysOfWeekDisabled: b.disableWeekends ? [0, 6] : [],
                    language: document.documentElement.lang
                }
                  , q = l[1];
                if (q)
                    if (b.$element = c,
                    "from" === f.csfDateRange)
                        q.registerDateFromPicker(b),
                        q.hideRangeMark() || (o.beforeShowDay = function(a) {
                            return h(a, b.ngModel,
                            q.getDateTo())
                        }
                        ),
                        b.$watch("ngModel", function(a) {
                            var b = q.getDateTo();
                            m.$valid && (a && b && 1 === d.compare(a, b)) && q.setDateTo(a)
                        }
                        );
                    else if ("to" === f.csfDateRange)
                        q.registerDateToPicker(b),
                        o.beforeShowDay = q.hideRangeMark() ? function(a) {
                            var b = g(a)
                              , c = q.getDateFrom();
                            c && -1 === d.compare(a, c) && (b.enabled = !1);
                            return b
                        }
                         : function(a) {
                            var c = q.getDateFrom()
                              , e = h(a, c, b.ngModel);
                            c && -1 === d.compare(a, c) && (e.enabled = !1);
                            return e
                        }
                        ;
                    else
                        throw 'Undefined or invalid value of csf-date-range attribute. Allowed values: ["from", "to"].';
                var r = c.datepicker(o);
                r.on("show", function() {
                    e && (b.ngModel && m.$valid) && (r.datepicker("update", d.dateToString(b.ngModel)),
                    e = !1)
                }
                );
                r.on("hide", function() {
                    e = !0
                }
                );
                r.on("changeDate", function() {
                    if (m.$valid) {
                        var a = {
                            $date: r.datepicker("getUTCDate")
                        };
                        b.onDateSelectedParams && angular.extend(a, b.onDateSelectedParams);
                        b.onDateSelected(a);
                        q && q.notifyDateRangeChange();
                        b.$apply()
                    }
                }
                );
                b.startDate && b.$watch("startDate", function() {
                    r.datepicker("setStartDate", b.startDate)
                }
                );
                b.endDate && b.$watch("endDate", function() {
                    r.datepicker("setEndDate",
                    b.endDate)
                }
                )
            }
            )
        }
    }
}
]).directive("csfDateRangePicker", ["$rootScope", function() {
    return {
        restrict: "EA",
        controller: ["$scope", "$element", "$attrs", function(a, b, c) {
            var d, e;
            this.registerDateFromPicker = function(a) {
                d = a
            }
            ;
            this.registerDateToPicker = function(a) {
                e = a
            }
            ;
            this.getDateFrom = function() {
                if (d)
                    return d.ngModel
            }
            ;
            this.getDateTo = function() {
                if (e)
                    return e.ngModel
            }
            ;
            this.setDateTo = function(a) {
                e && (e.ngModel = a)
            }
            ;
            this.notifyDateRangeChange = function() {
                a.onDateRangeChange({
                    $dateFrom: d.ngModel,
                    $dateTo: e.ngModel
                })
            }
            ;
            this.hideRangeMark =
            function() {
                return "true" === c.hideRangeMark
            }
        }
        ],
        scope: {
            onDateRangeChange: "\x26"
        },
        link: function() {}
    }
}
]);
angular.module("commonDirectives").directive("csfDisableNgAnimate", ["$animate", function(a) {
    return {
        link: function(b, c) {
            a.enabled(!1, c)
        }
    }
}
]);
"use strict";
angular.module("commonDirectives").directive("csfDropdownSelect", ["$parse", "$compile", "$document", function(a, b, c) {
    var d = function(a, b, c, h, i, j) {
        var k = 0;
        b || (b = ['\x3cul class\x3d"dropdown-select-menu dropdown-menu" role\x3d"menu" aria-labelledby\x3d"drop1" ng-click\x3d"toggle($event)"\x3e', "\x3c/ul\x3e"]);
        angular.forEach(a, function(a) {
            if (a.divider)
                return b.splice(k + 1, 0, '\x3cli class\x3d"divider"\x3e\x3c/li\x3e');
            var e = void 0;
            if (a.click || c)
                if (e = 'ng-click\x3d"',
                a.click && (e += a.click),
                c && "''" == a[i] ? e += "value\x3d'';" :
                c && a[i] && (e += "value\x3d'" + a[i] + "';"),
                e += '"',
                "''" == a[i] && (void 0 == a[j] || "''" == a[j]))
                    a[j] = h;
            e = "\x3cli" + (a.submenu && a.submenu.length ? ' submenu class\x3d"dropdown-submenu"' : "") + '\x3e\x3ca tabindex\x3d"-1" ng-href\x3d"' + (a.href || "") + '"' + (e ? e : "") + (a.target ? '" target\x3d"' + a.target + '"' : "") + (a.method ? '" data-method\x3d"' + a.method + '"' : "") + "\x3e" + (a.showIcon ? '\x3cdiv class\x3d"dropdown-icon ' + a.icon + '"/\x3e' : "") + "\x26nbsp;\x3cspan class\x3d" + (a.icon ? '"dropdown-label"' : '""') + "\x3e" + (a[j] || "") + "\x3c/span\x3e\x3c/a\x3e";
            a.submenu && a.submenu.length && (e += d(a.submenu, null , c, h, i, j).join("\n"));
            b.splice(++k, 0, e + "\x3c/li\x3e")
        }
        );
        return b
    }
    ;
    return {
        restrict: "EA",
        require: "?ngModel",
        scope: {
            value: "\x3d",
            valueObj: "\x3d",
            csfDropdownSelect: "\x3d",
            customClass: "\x3d"
        },
        replace: !0,
        templateUrl: "static/templates/csf-dropdown-select.html",
        compile: function() {
            return function(a, f, g, h) {
                var i = c[0]
                  , j = 0
                  , k = null
                  , l = "value"
                  , n = "text"
                  , m = !1;
                g.valueField && (l = g.valueField);
                g.textField && (n = g.textField);
                g.parentSelectable && (m = g.parentSelectable);
                a.placeholder =
                g.placeholder ? g.placeholder : "";
                a.toggle = function(b) {
                    b.stopPropagation();
                    b = angular.element(b.target);
                    if (!(void 0 !== b.parent().attr("submenu") || void 0 !== b.parent().parent().attr("submenu")) || m)
                        if (r(),
                        a.dropActive)
                            c.on("click", q);
                    a.dropActive || c.off("click", q)
                }
                ;
                var o = function(b, c) {
                    if (b)
                        for (var d = 0, f = b.length; d < f; d++) {
                            var g = b[d];
                            if (g[l] == c || g[l] == "'" + c + "'") {
                                if ("''" == g[l] && (void 0 == g[n] || "''" == g[n]))
                                    g[n] = a.placeholder;
                                return g
                            }
                            if (g.submenu && g.submenu.length && (g = o(g.submenu, c)))
                                return g
                        }
                }
                  , q = function() {
                    r();
                    a.$apply();
                    c.off("click", q)
                }
                  , r = function() {
                    if (a.dropActive && !k.hasClass("active"))
                        a.dropActive = !1;
                    else {
                        a.dropActive = !a.dropActive;
                        if (a.dropActive) {
                            var b = f[0].offsetHeight
                              , c = k.height()
                              , d = f.offset()
                              , g = d.top
                              , d = d.left
                              , h = g + c;
                            j || (j = Math.max(Math.max(i.body.scrollHeight, i.documentElement.scrollHeight), Math.max(i.body.offsetHeight, i.documentElement.offsetHeight), Math.max(i.body.clientHeight, i.documentElement.clientHeight)));
                            h > j && (g -= c);
                            k.css({
                                top: g + b + "px",
                                left: d + "px"
                            })
                        }
                        a.dropActive && a.valueObj ? a.valueObj.dropdownActive =
                        !0 : a.valueObj && (a.valueObj.dropdownActive = !1);
                        k.toggleClass("active")
                    }
                }
                ;
                g.selectMode && a.$watch("value", function(b) {
                    if (void 0 != b && (h && void 0 != h.$viewValue && h.$setViewValue(b),
                    b = o(a.csfDropdownSelect, b)))
                        a.label = b[n],
                        a.icon = b.icon,
                        a.valueObj && (a.valueObj = b)
                }
                );
                a.$watch("csfDropdownSelect", function() {
                    a.csfDropdownSelect && (k && k.remove(),
                    k = angular.element(d(a.csfDropdownSelect, null , g.selectMode, g.placeholder, l, n).join("")),
                    b(k)(a),
                    angular.element(i.body).append(k))
                }
                );
                a.$on("$destroy", function() {
                    c.off("click",
                    q);
                    k.remove()
                }
                )
            }
        }
    }
}
]);
angular.module("commonDirectives").directive("csfEmptyList", ["dictionaryProvider", function(a) {
    return {
        restrict: "A",
        templateUrl: "static/templates/csf-empty-list.html",
        replace: !0,
        scope: {
            messageCode: "@",
            titleCode: "@",
            messageCodeFunction: "\x3d",
            titleCodeFunction: "\x3d"
        },
        link: function(b) {
            b.titleCode && (b.title = a.getDictionary("D_MESSAGES")[b.titleCode].MESSAGE);
            b.messageCode && (b.message = a.getDictionary("D_MESSAGES")[b.messageCode].MESSAGE);
            b.$watch("messageCodeFunction", function() {
                b.messageCodeFunction && (b.message =
                a.getDictionary("D_MESSAGES")[b.messageCodeFunction].MESSAGE)
            }
            );
            b.$watch("titleCodeFunction", function() {
                b.titleCodeFunction && (b.title = a.getDictionary("D_MESSAGES")[b.titleCodeFunction].MESSAGE)
            }
            )
        }
    }
}
]);
"use strict";
angular.module("commonDirectives").directive("csfExchangeRateChart", ["$window", "bigDecimal", "$log", function(a, b) {
    return {
        restrict: "A",
        scope: {
            currency: "\x3d",
            exchangeRates: "\x3d",
            valueField: "\x3d",
            tooltipPosition: "\x3d",
            active: "\x3d",
            watchHeight: "\x3d"
        },
        templateUrl: "static/templates/csf-exchange-rate-chart.html",
        replace: !0,
        controller: ["$scope", "chartUtils", function(a, b) {
            a.x0;
            a.y0;
            a.xScale;
            a.yScale;
            a.width;
            a.height;
            a.margin = {
                top: 10,
                right: 5,
                bottom: 10,
                left: 5
            };
            this.getX = function(e) {
                e = b.getDataMarkForPosition(a.exchangeRates,
                e - a.x0 - a.margin.left, a.xScale, !1, !1);
                return a.x0 + a.margin.left + a.xScale(a.exchangeRates[e].date)
            }
            ;
            this.getY = function(e) {
                e = b.getDataMarkForPosition(a.exchangeRates, e - a.x0 - a.margin.left, a.xScale, !1, !1);
                return a.yScale(a.exchangeRates[e][a.valueField]) + a.y0 + a.margin.top + 17
            }
            ;
            this.getData = function(e) {
                e = b.getDataMarkForPosition(a.exchangeRates, e - a.x0 - a.margin.left, a.xScale, !1, !1);
                return {
                    date: a.exchangeRates[e].date,
                    value: a.exchangeRates[e][a.valueField],
                    isoCode: a.exchangeRates[e].isoCode,
                    currency: a.currency
                }
            }
            ;
            this.registerTooltip = function(a) {
                this.tooltip = a;
                this.tooltip.init()
            }
            ;
            this.showTooltip = function(b, d, g) {
                this.tooltip.show(a.x0 + b, a.y0 + d, g)
            }
            ;
            this.closeTooltip = function() {
                this.tooltip.close()
            }
        }
        ],
        link: function(c, d, e, f) {
            function g() {
                d3.select(d[0]).selectAll("svg").remove();
                h = d3.select(d[0]).select("div.chart");
                i = h.append("svg:svg").attr("width", c.width + c.margin.left + c.margin.right).attr("height", c.height + c.margin.top + c.margin.bottom);
                c.x0 = h.node().offsetLeft;
                c.y0 = h.node().offsetTop
            }
            var h, i, j, k, l, n;
            c.width =
            d[0].offsetWidth - c.margin.top - c.margin.bottom;
            c.height = d[0].offsetHeight - c.margin.top - c.margin.bottom;
            var m = d3.svg.line().x(function(a) {
                return j(new Date(a.date))
            }
            ).y(function(a) {
                return k(a[c.valueField])
            }
            ).interpolate("linear");
            g();
            a.onresize = function() {
                c.$apply()
            }
            ;
            c.$watch(function() {
                return d[0].offsetWidth
            }
            , function() {
                c.width = d[0].offsetWidth - c.margin.top - c.margin.bottom;
                c.active && c.render()
            }
            );
            c.watchHeight && (c.heightWatch = c.$watch(function() {
                return d[0].offsetHeight
            }
            , function() {
                c.height = d[0].offsetHeight -
                c.margin.top - c.margin.bottom;
                c.active && c.render()
            }
            ));
            c.$watch("exchangeRates", function() {
                c.exchangeRates && 1 < c.exchangeRates.length && c.render()
            }
            );
            c.render = function() {
                if (c.exchangeRates) {
                    var a = c.exchangeRates.length
                      , d = c.exchangeRates[a - 1][c.valueField]
                      , a = d - c.exchangeRates[a - 2][c.valueField];
                    c.lastRate = d;
                    c.tendency = 0 < a ? "up" : 0 > a ? "down" : "fixed";
                    g();
                    j = d3.time.scale().range([0, c.width]);
                    k = d3.scale.linear().range([c.height, 0]);
                    d = d3.extent(c.exchangeRates, function(a) {
                        return new Date(a.date)
                    }
                    );
                    j.domain(d);
                    var d = d3.extent(c.exchangeRates, function(a) {
                        return a[c.valueField]
                    }
                    )
                      , a = d[0]
                      , e = d[1]
                      , h = b.minus(e, a)
                      , h = 0 != h ? b.times(0.1, h) : 1;
                    d[0] = b.minus(a, h);
                    d[1] = b.plus(e, h);
                    k.domain(d);
                    c.xScale = j;
                    c.yScale = k;
                    l = d3.svg.axis().scale(j).ticks(0);
                    n = d3.svg.axis().scale(k).ticks(0).orient("left");
                    i.append("svg:g").attr("class", "x axis").attr("transform", "translate(" + c.margin.left + "," + (c.height + c.margin.top) + ")").call(l);
                    i.append("svg:g").attr("class", "y axis").attr("transform", "translate(" + c.margin.left + "," + c.margin.top +
                    ")").call(n);
                    d = d3.svg.area().x(function(a) {
                        return j(new Date(a.date))
                    }
                    ).y0(k.range()[0]).y1(function(a) {
                        return k(a[c.valueField])
                    }
                    ).interpolate("linear");
                    i.append("svg:path").datum(c.exchangeRates).attr("d", m(c.exchangeRates)).attr("transform", "translate(" + c.margin.left + "," + c.margin.top + ")").attr("d", d).attr("class", "area");
                    i.append("svg:path").datum(c.exchangeRates).attr("d", m(c.exchangeRates)).attr("transform", "translate(" + c.margin.left + "," + c.margin.top + ")");
                    i.on("click", function() {
                        var a = d3.mouse(this)[0]
                          ,
                        b = d3.mouse(this)[1];
                        f.showTooltip(a, b, !1)
                    }
                    );
                    i.on("mousemove", function() {
                        var a = d3.mouse(this)[0]
                          , b = d3.mouse(this)[1];
                        f.showTooltip(a, b, !0)
                    }
                    );
                    i.on("mouseout", function() {
                        f.closeTooltip()
                    }
                    )
                }
            }
        }
    }
}
]).directive("csfExchangeRateChartTooltip", ["$rootScope", "$log", function(a) {
    return {
        require: "^csfExchangeRateChart",
        restrict: "A",
        templateUrl: "static/templates/csf-exchange-rate-chart-tooltip.html",
        replace: !0,
        scope: {
            tooltipPosition: "\x3d"
        },
        link: function(b, c, d, e) {
            function f(a) {
                a.stopPropagation();
                a.preventDefault();
                a.gesture && (a.gesture.preventDefault(),
                a.gesture.stopPropagation())
            }
            b.disableMouseEvents = !0;
            var g = c[0];
            c = c[0].querySelector(".close");
            var h = Hammer(g, {
                drag_max_touches: 0
            })
              , i = Hammer(c, {
                drag_max_touches: 0
            });
            b.left;
            b.leftDuringDrag;
            b.top;
            b.data;
            b.closing = !1;
            b.transformLeft = -15;
            b.transformTop = 0;
            b.dontCloseThis = !1;
            b.init = function() {
                "left" == b.tooltipPosition && (b.transformLeft = -160);
                "top" == b.tooltipPosition && (b.transformTop = -160);
                h.on("touch drag", function(a) {
                    var c = e.getX(b.left + a.gesture.deltaX);
                    b.leftDuringDrag =
                    c;
                    g.style.left = c + b.transformLeft + "px";
                    g.style.top = e.getY(b.left + a.gesture.deltaX) + b.transformTop + "px";
                    b.data = e.getData(c);
                    b.$apply();
                    f(a)
                }
                );
                h.on("release", function() {
                    b.left = b.leftDuringDrag
                }
                );
                i.on("touch", function(a) {
                    b.close();
                    f(a)
                }
                )
            }
            ;
            b.$on("$destroy", function() {
                h.off("touch drag");
                h.off("release");
                i.on("touch")
            }
            );
            b.show = function(c, d, f) {
                void 0 != f && (b.disableMouseEvents = f);
                b.closing ? b.closing = !1 : (b.dontCloseThis = !0,
                a.$broadcast("close-others-chart-tooltips", {}),
                b.left = e.getX(c),
                b.top = e.getY(c),
                b.data =
                e.getData(c),
                b.$apply(),
                g.style.left = b.left + b.transformLeft + "px",
                g.style.top = b.top + b.transformTop + "px",
                g.style.opacity = 1,
                g.style.display = "block")
            }
            ;
            b.isVisible = function() {
                return 1 == g.style.opacity ? !0 : !1
            }
            ;
            b.$on("close-others-chart-tooltips", function() {
                b.dontCloseThis ? b.dontCloseThis = !1 : (b.close(),
                b.closing = !1)
            }
            );
            b.close = function() {
                b.closing = !0;
                g.style.opacity = 0;
                g.style.display = "none"
            }
            ;
            e.registerTooltip(b)
        }
    }
}
]);
angular.module("commonDirectives").directive("csfFocusNext", [function() {
    return {
        restrict: "A",
        link: function(a, b, c) {
            var d = c.csfFocusNext;
            b.bind("keypress", function() {
                var a = document.getElementById(d);
                null  != a && a.focus()
            }
            )
        }
    }
}
]);
angular.module("commonDirectives").directive("csfFocus", [function() {
    return {
        restrict: "A",
        link: function(a, b, c) {
            function d() {
                if (e)
                    angular.element(window).one("keydown", function() {
                        b.focus()
                    }
                    );
                else
                    b.focus()
            }
            a = a.$eval(c.csfFocus);
            var e = /(MSIE|Trident)/.test(navigator.userAgent);
            !0 == a && setTimeout(d, 300)
        }
    }
}
]);
"use strict";
angular.module("commonDirectives").directive("csfGrid", ["$filter", "commonSorter", "$animate", "$rootScope", "$timeout", function(a, b, c, d, e) {
    return {
        restrict: "EA",
        templateUrl: "static/templates/csf-grid/csf-grid.html",
        transclude: !0,
        replace: !0,
        scope: {
            disableGrid: "\x3d",
            source: "\x3d",
            paging: "\x3d",
            gridApi: "\x3d",
            checkboxSelectionField: "@",
            checkboxSelectedItems: "\x3d",
            disableDetailsFunc: "\x26"
        },
        controller: ["$scope", "$element", function(d, g) {
            var h = this;
            d.sorting = {};
            d.pagingWatchEnabled = !0;
            this.gridDisabled = function() {
                return d.disableGrid
            }
            ;
            this.disableDetailsFunc = function(a) {
                return d.disableDetailsFunc({
                    item: a
                })
            }
            ;
            this.registerBody = function(a) {
                h.body = a;
                a.$element && d.$watch("source", function() {
                    e(function() {
                        a.$element.perfectScrollbar("update")
                    }
                    , 0)
                }
                )
            }
            ;
            this.registerRowDetails = function(a) {
                h.rowDetails = a
            }
            ;
            this.getGridScope = function() {
                return d
            }
            ;
            this.sort = function(c, e) {
                d.disableGrid || (void 0 !== e ? (d.sorting = b.sort(c, e),
                d.sorting.descending = !d.sorting.descending,
                d.source = a("sortFilter")(d.source, d.sorting)) : (d.sorting.descending = !d.sorting.descending,
                d.sorting.field = c,
                d.source = a("orderBy")(d.source, c, d.sorting.descending)))
            }
            ;
            this.initialSorting = function(a, b) {
                d.disableGrid || (d.sorting.field = a,
                d.sorting.descending = "desc" === b)
            }
            ;
            var i = null ;
            d.$watch("paging.list", function(a) {
                if (!d.disableGrid) {
                    if (a && !i)
                        for (var b = 0, c = a.length; b < c; b++)
                            a[b].visible = !0;
                    h.body && d.pagingWatchEnabled && (h.body.pages[0] = a,
                    h.rowDetails && (h.rowDetails.$element.removeClass("csf-grid-rd-expanded"),
                    i && i.$element.removeClass("csf-grid-row-invisible"),
                    i = null ,
                    g.append(h.rowDetails.$element)));
                    h.enablePagingWatch(!0);
                    h.clearCheckboxColumns()
                }
            }
            );
            d.gridApi && (d.gridApi.clearCheckboxColumns = function() {
                h.toggleAllCheckboxes(!1);
                void 0 !== h.checkboxHeaderColumn && (h.checkboxHeaderColumn.checkedAll = !1)
            }
            ,
            d.gridApi.setItemIndex = function(a) {
                d.paging && (d.paging.index = a)
            }
            ,
            d.gridApi.reset = function() {
                h.cancelDetails()
            }
            );
            this.cancelDetails = function() {
                c.removeClass(h.rowDetails.$element, "csf-grid-rd-expanded", function() {
                    i && i.$element.removeClass("csf-grid-row-invisible");
                    i = null
                }
                )
            }
            ;
            this.enablePagingWatch =
            function(a) {
                d.pagingWatchEnabled = a
            }
            ;
            this.toggleShowDetails = function(a) {
                if (h.rowDetails && !d.disableGrid && (!i || i.$index !== a.$index))
                    h.rowDetails.$element.removeClass("csf-grid-rd-expanded"),
                    null  != i && i.$element.removeClass("csf-grid-row-invisible"),
                    i = a,
                    a.$element.after(h.rowDetails.$element),
                    h.rowDetails.onShowCallback({
                        $item: a.$item
                    }),
                    h.rowDetails.detailsCheckbox && (h.rowDetails.detailsCheckbox.checked = h.checkboxColumns[a.$index].checked),
                    a.$element.hasClass("csf-grid-row-disabled-details") || c.addClass(a.$element,
                    "csf-grid-row-invisible", function() {
                        h.rowDetails.$element.addClass("csf-grid-rd-expanded")
                    }
                    )
            }
            ;
            this.clearCheckboxColumns = function() {
                h.checkboxColumns = [];
                void 0 !== h.checkboxHeaderColumn && (h.checkboxHeaderColumn.checkedAll = !1);
                void 0 !== d.checkboxSelectedItems && (d.checkboxSelectedItems.length = 0)
            }
            ;
            this.registerCheckboxColumn = function(a) {
                h.checkboxColumns.push(a)
            }
            ;
            this.registerCheckboxHeaderColumn = function(a) {
                h.checkboxHeaderColumn = a
            }
            ;
            this.toggleAllCheckboxes = function(a) {
                if (d.checkboxSelectedItems) {
                    for (var b =
                    d.checkboxSelectedItems.length = 0, c = h.checkboxColumns.length; b < c; b++)
                        (h.checkboxColumns[b].checked = a) && d.checkboxSelectedItems.push(h.checkboxColumns[b].$item);
                    i && h.rowDetails.detailsCheckbox && (h.rowDetails.detailsCheckbox.checked = a);
                    if (d.gridApi && d.gridApi.onAllCheckboxesClick)
                        d.gridApi.onAllCheckboxesClick(a)
                }
            }
            ;
            this.toogleCheckbox = function(a, b) {
                for (var c = -1, e = 0, g = d.checkboxSelectedItems.length; e < g; e++)
                    if (d.checkboxSelectedItems[e][d.checkboxSelectionField] === a[d.checkboxSelectionField]) {
                        c = e;
                        break
                    }
                -1 ===
                c && b ? d.checkboxSelectedItems.push(a) : -1 !== c && !b && d.checkboxSelectedItems.splice(c, 1);
                if (d.gridApi && d.gridApi.onCheckboxClick)
                    d.gridApi.onCheckboxClick(a, b)
            }
            ;
            this.toogleDetailsCheckbox = function(a) {
                i && (this.toogleCheckbox(i.$item, a),
                h.checkboxColumns[i.$index].checked = a)
            }
        }
        ]
    }
}
]).directive("csfGridHeader", [function() {
    return {
        restrict: "EA",
        templateUrl: "static/templates/csf-grid/csf-grid-header.html",
        transclude: !0,
        replace: !0
    }
}
]).directive("csfGridHeaderColumn", [function() {
    return {
        restrict: "EA",
        require: "^csfGrid",
        templateUrl: "static/templates/csf-grid/csf-grid-header-column.html",
        transclude: !0,
        replace: !0,
        scope: {
            field: "@",
            sorterType: "@",
            initialSorting: "@"
        },
        link: function(a, b, c, d) {
            a.sortable = "true" === c.sortable;
            a.initialSorting && d.initialSorting(a.field, a.initialSorting);
            d.getGridScope().$watch("sorting ", function(b) {
                a.sorting = b
            }
            , !0);
            a.sort = function() {
                !0 === a.sortable && d.sort(a.field, a.sorterType)
            }
        }
    }
}
]).directive("csfGridHeaderCheckboxColumn", [function() {
    return {
        restrict: "EA",
        require: "^csfGrid",
        templateUrl: "views/templates/csf-grid/csf-grid-header-checkbox-column",
        replace: !0,
        scope: {},
        link: function(a, b, c, d) {
            a.checkedAll = !1;
            a.gridDisabled = function() {
                return d.gridDisabled()
            }
            ;
            a.toggleAllCheckboxes = function(a) {
                d.toggleAllCheckboxes(a)
            }
            ;
            d.registerCheckboxHeaderColumn(a)
        }
    }
}
]).directive("csfGridBody", [function() {
    return {
        restrict: "EA",
        require: "^csfGrid",
        templateUrl: "static/templates/csf-grid/csf-grid-body.html",
        transclude: !0,
        replace: !0,
        link: function(a, b, c, d) {
            a.pages = [];
            a.gridDisabled = function() {
                return d.gridDisabled()
            }
            ;
            void 0 !== c.scrollbar && (b.perfectScrollbar(),
            a.$element =
            b);
            d.registerBody(a);
            a.toggleShowDetails = function(a) {
                d.toggleShowDetails(a)
            }
        }
    }
}
]).directive("csfGridRow", ["$q", function(a) {
    return {
        restrict: "EA",
        require: "^csfGrid",
        link: function(b, c, d, e) {
            b.$element = c;
            b.$watch("$item.visible", function(a) {
                !1 === a ? c.addClass("csf-grid-row-invisible") : c.removeClass("csf-grid-row-invisible")
            }
            );
            e.rowDetails ? (b = a.when(e.disableDetailsFunc(b.$item))) && b.then(function(a) {
                a && c.addClass("csf-grid-row-disabled-details")
            }
            ) : c.addClass("csf-grid-row-disabled-details")
        }
    }
}
]).directive("csfGridColumn",
[function() {
    return {
        restrict: "EA",
        require: "^csfGrid",
        template: '\x3cdiv class\x3d"csf-grid-table-cell" ng-transclude\x3e\x3c/div\x3e',
        transclude: !0,
        replace: !0
    }
}
]).directive("csfGridCheckboxColumn", [function() {
    return {
        restrict: "EA",
        require: ["^csfGrid", "^?csfGridRowDetails"],
        templateUrl: "static/templates/csf-grid/csf-grid-checkbox-column.html",
        replace: !0,
        link: function(a, b, c, d) {
            b.bind("click", function(a) {
                a.stopPropagation()
            }
            );
            a.gridDisabled = function() {
                return d[0].gridDisabled()
            }
            ;
            if (d[1])
                d[1].registerDetailsCheckbox(a),
                a.toggleCheckbox = function(a) {
                    d[0].toogleDetailsCheckbox(a)
                }
                ;
            else {
                var e = d[0];
                e.registerCheckboxColumn(a);
                a.toggleCheckbox = function(b) {
                    a.$item.checkboxChecked = !a.$item.checkboxChecked;
                    e.toogleCheckbox(a.$item, b)
                }
            }
        }
    }
}
]).directive("csfGridRowDetails", [function() {
    return {
        restrict: "EA",
        require: "^csfGrid",
        templateUrl: "static/templates/csf-grid/csf-grid-row-details.html",
        transclude: !0,
        replace: !0,
        controller: ["$scope", function(a) {
            this.registerDetailsCheckbox = function(b) {
                a.detailsCheckbox = b
            }
        }
        ],
        scope: {
            onShowCallback: "\x26onShow",
            controlApi: "\x3d"
        },
        link: function(a, b, c, d) {
            a.$element = b;
            d.registerRowDetails(a);
            a.controlApi && (a.controlApi.cancel = function() {
                d.cancelDetails()
            }
            ,
            a.controlApi.enablePagingWatch = function(a) {
                d.enablePagingWatch(a)
            }
            )
        }
    }
}
]);
"use strict";
angular.module("commonDirectives").directive("csfImgSrc", ["$animate", function(a) {
    return {
        restrict: "EA",
        transclude: !1,
        replace: !1,
        scope: {
            csfImgSrc: "\x3d",
            csfImgAnimation: "@"
        },
        link: function(b, c) {
            var d = angular.element("\x3cimg\x3e\x3c/img\x3e");
            c.addClass("csf-img-src");
            c.addClass(b.csfImgAnimation || "opacity");
            var e = null ;
            b.$watch("csfImgSrc", function(f) {
                f ? (e ? (a.leave(e),
                e = d.clone()) : e = d,
                e.attr("src", b.csfImgSrc),
                a.enter(e, c)) : e && a.leave(e, function() {
                    e = null
                }
                )
            }
            )
        }
    }
}
]);
angular.module("commonDirectives").directive("csfInputWithHints", [function() {
    return {
        restrict: "A",
        controller: ["$scope", "$element", function(a, b) {
            function c() {
                if (j)
                    if (i && i.hasClass("ng-hide") || !i) {
                        for (var a = !1, b = !1, c = 0, m = f.length; c < m; c++)
                            f.hasOwnProperty(c) && f[c][d] && (f[c][e] && (b = !0),
                            g && (a = !0));
                        a ? j.addClass("visible") : j.removeClass("visible");
                        b ? h.addClass("ng-invalid") : h.removeClass("ng-invalid")
                    } else
                        j.removeClass("visible")
            }
            var d = "CONDITION"
              , e = "ISVALIDATION"
              , f = []
              , g = !1
              , h = b[0].querySelector("[name]") ?
            angular.element(b[0].querySelector("[name]")) : null
              , i = b[0].querySelector(".invalid-msgs") ? angular.element(b[0].querySelector(".invalid-msgs")) : null
              , j = null ;
            this.registerHintsElement = function(a) {
                j = a;
                j.css("width", h.css("width"))
            }
            ;
            this.addCondition = function(a, b) {
                var c = {};
                c[d] = a;
                c[e] = b;
                f.push(c);
                return f.length - 1
            }
            ;
            this.updateCondition = function(a, b) {
                f[a][d] = b;
                c()
            }
            ;
            h.on("focus", function() {
                g = !0;
                c()
            }
            );
            h.on("blur", function() {
                g = !1;
                c()
            }
            );
            h.on("change", function() {
                c()
            }
            )
        }
        ]
    }
}
]).directive("csfInputHints", [function() {
    return {
        restrict: "A",
        require: "^csfInputWithHints",
        transclude: !0,
        replace: !0,
        templateUrl: "static/templates/csf-input-hints/csf-input-hints.html",
        link: function(a, b, c, d) {
            d.registerHintsElement(b)
        }
    }
}
]).directive("csfInputHint", [function() {
    return {
        restrict: "A",
        require: "^csfInputWithHints",
        templateUrl: "static/templates/csf-input-hints/csf-input-hint.html",
        scope: {
            condition: "\x3d",
            validation: "\x3d",
            message: "@"
        },
        link: function(a, b, c, d) {
            var e = -1;
            a.$watch("condition", function(a, b) {
                a !== b && d.updateCondition(e, a)
            }
            );
            e = d.addCondition(a.condition,
            a.validation)
        }
    }
}
]);
angular.module("commonDirectives").controller("csfMapCtrl", ["$scope", "$attrs", function(a) {
    var b = this, c = b.markers = [], d;
    b.addMarker = function(e, f) {
        e.$element = f;
        getMarkerIcon = function(a) {
            if ("A" === a.type)
                return "marker-icon-atm.png";
            if ("B" === a.type)
                return "marker-icon-branch.png";
            if ("AB" === a.type)
                return "marker-icon-branch-atm.png"
        }
        ;
        e.$marker = new google.maps.Marker({
            position: e.latLng,
            map: a.map,
            title: e.title
        });
        c.push(e);
        b.showMarkerInfoWindow = function(b) {
            d && d.$infoWindow && d.$infoWindow.close();
            b.$infoWindow ||
            (b.$infoWindow = new google.maps.InfoWindow({
                content: b.markerInfoContentElement.html()
            }));
            b.$infoWindow.open(a.map, b.$marker);
            d = b
        }
        ;
        b.hideMarkerInfoWindow = function(a) {
            a.$infoWindow && a.$infoWindow.close()
        }
        ;
        google.maps.event.addListener(e.$marker, "click", function() {
            a.$apply(function() {
                b.showMarkerInfoWindow(e, !0);
                if (b.onMarkerClick)
                    b.onMarkerClick(e.markerData)
            }
            )
        }
        )
    }
    ;
    b.removeMarker = function(a) {
        var b = c.indexOf(a);
        a.$marker.setMap(null );
        a.$infoWindow && a.$infoWindow.close();
        c.splice(b, 1)
    }
}
]).directive("csfMap",
["$compile", "$templateCache", function() {
    return {
        restrict: "EA",
        controller: "csfMapCtrl",
        transclude: !0,
        replace: !0,
        template: '\x3cdiv class\x3d"csf-map"\x3e\x3cdiv class\x3d"csf-map-container"\x3e\x3c/div\x3e\x3cdiv ng-transclude style\x3d"display: none"\x3e\x3c/div\x3e\x3c/div\x3e',
        scope: {
            options: "\x3d",
            onBoundsChange: "\x3d",
            onMarkerClick: "\x3d",
            defaultLat: "\x3d",
            defaultLng: "\x3d",
            center: "\x3d"
        },
        link: function(a, b, c, d) {
            a.mapOptions = {
                zoom: 10
            };
            a.center = function() {
                return a.map.getCenter()
            }
            ;
            d.onMarkerClick =
            a.onMarkerClick;
            a.mapOptions.center = a.options.center ? new google.maps.LatLng(a.options.center.latitude,a.options.center.longitude) : new google.maps.LatLng(a.defaultLat,a.defaultLng);
            a.options.zoom && (a.mapOptions.zoom = a.options.zoom);
            a.mapOptions.mapTypeId = google.maps.MapTypeId.ROADMAP;
            a.map = new google.maps.Map(b.find(".csf-map-container")[0],a.mapOptions);
            if (a.onBoundsChange) {
                var e;
                google.maps.event.addListener(a.map, "idle", function() {
                    e && window.clearTimeout(e);
                    e = window.setTimeout(function() {
                        a.onBoundsChange(a.map.getBounds())
                    }
                    ,
                    200)
                }
                )
            }
            a.$watch("options.center", function(b, c) {
                b && b !== c && ("geolocation" === b ? navigator.geolocation && navigator.geolocation.getCurrentPosition(function(b) {
                    a.map.setCenter(new google.maps.LatLng(b.coords.latitude,b.coords.longitude))
                }
                ) : angular.isObject(b) && a.map.setCenter(new google.maps.LatLng(b.latitude,b.longitude)))
            }
            );
            a.$watch("options.bounds", function(b) {
                angular.isObject(b) && a.map.fitBounds(b);
                a.options.zoom = void 0
            }
            );
            a.$watch("options.zoom", function(b, c) {
                b && b !== c && a.map.setZoom(b)
            }
            )
        }
    }
}
]).directive("csfMapMarker",
["$parse", function() {
    return {
        require: "^csfMap",
        restrict: "EA",
        replace: !0,
        template: "",
        controller: ["$scope", function(a) {
            this.registerMarkerInfoWindow = function(b) {
                a.markerInfoContentElement = b
            }
        }
        ],
        scope: {
            latLng: "\x3d",
            title: "\x3d",
            active: "\x3d",
            markerData: "\x3d"
        },
        link: function(a, b, c, d) {
            a.active = !1;
            d.addMarker(a, b);
            a.$watch("active", function() {
                a.active ? d.showMarkerInfoWindow(a, !1) : d.hideMarkerInfoWindow(a)
            }
            );
            a.$on("$destroy", function() {
                d.removeMarker(a)
            }
            )
        }
    }
}
]).directive("csfMapMarkerTemplate", ["$parse", function() {
    return {
        require: "^csfMapMarker",
        restrict: "EA",
        scope: !1,
        link: function(a, b, c, d) {
            d.registerMarkerInfoWindow(b)
        }
    }
}
]);
"use strict";
angular.module("commonDirectives").directive("csfMonthPicker", ["$locale", "csfUtils", function(a, b) {
    return {
        restrict: "A",
        replace: !0,
        require: "ngModel",
        scope: {
            onMonthSelected: "\x26onMonthSelected",
            monthOffset: "@",
            ngModel: "\x3d",
            model: "\x3d"
        },
        templateUrl: "views/templates/csf-month-picker",
        link: function(a) {
            var d;
            d = b.getCurrentDate().getMonth();
            var e = b.getCurrentDate().getFullYear()
              , f = b.getFullMonthNames()
              , g = f.slice(0, d)
              , f = f.slice(d, 12);
            a.monthOffset |= 0;
            for (var h = 0; h < d; h++)
                g[h] = g[h] + " " + (e + 1);
            for (h = 0; h < 12 -
            d; h++)
                f[h] = f[h] + " " + e;
            d = f.concat(g).slice(a.monthOffset);
            a.months = d;
            a.save = function(b) {
                a.ngModel = parseInt(a.monthOffset) + parseInt(b)
            }
        }
    }
}
]);
"use strict";
angular.module("commonDirectives").controller("RadioCarouselCtrl", ["$scope", "$animate", "$compile", "$templateCache", "$timeout", function(a, b, c, d, e) {
    var f = a.options = this.options = [], g, h = [], i, j, k, l, n, m;
    k = l = n = m = void 0;
    var o = !1;
    g = a.slidesNo;
    j = i = Math.floor(g / 2);
    var q = function(a) {
        for (var b = f.length; b--; )
            if (f[b].value == a)
                return b;
        return null
    }
      , r = function(a) {
        h[j] && h[j].$element && h[j].removeClass("active");
        k = q(a);
        if (null  != k) {
            l.empty();
            h = [];
            l.append('\x3cli style\x3d"display:none;"\x3e\x3c/li\x3e');
            a = -1 * i;
            for (var b =
            1 == f.length ? a : i; b >= a; --b) {
                var d = f[((k + b) % f.length + f.length) % f.length].$element;
                -1 != h.indexOf(d) ? h.push(d.clone()) : h.push(d)
            }
            for (b = h.length; b--; )
                l.append(h[b]);
            h[j].addClass("active");
            h.reverse()
        }
    }
    ;
    this.addOption = function(b) {
        f.push(b);
        b.$element = m(b, function() {}
        );
        b.last && (f.length < a.slidesNo && (g = f.length,
        j = i = Math.floor(g / 2)),
        e(function() {
            r(a.ngModel)
        }
        , 0))
    }
    ;
    this.removeOption = function(b) {
        b = f.indexOf(b);
        f.splice(b, 1);
        1 < f.length && r(a.ngModel)
    }
    ;
    this.register = function(b) {
        l = b;
        n = angular.element("\x3cli\x3e" +
        d.get(a.optionTemplate) + "\x3c/li\x3e");
        m = c(n)
    }
    ;
    this.setActive = function(b) {
        a.ngModel = b.value
    }
    ;
    a.next = function() {
        if (!o && (a.editable || void 0 == a.editable))
            o = !0,
            a.ngModel = f[((k + 1) % f.length + f.length) % f.length].value
    }
    ;
    a.prev = function() {
        if (!o && (a.editable || void 0 == a.editable))
            o = !0,
            a.ngModel = f[((k - 1) % f.length + f.length) % f.length].value
    }
    ;
    a.$watch("ngModel", function(a, d) {
        if (a != d) {
            var c = q(a)
              , e = !1
              , g = !1;
            if (1 == Math.abs(c - k))
                g = !0,
                e = c > k;
            else if (0 == k || 0 == c)
                g = k == f.length - 1 || c == f.length - 1,
                e = 0 == c;
            g && 0 !== h.length ? (h[j].removeClass("active"),
            e ? (h[j + 1].addClass("active"),
            e = f[(k + i + 1) % f.length].$element,
            -1 != h.indexOf(e) && (e = e.clone()),
            h.push(e),
            g = h.splice(0, 1)[0],
            b.leave(g),
            b.enter(e, l, void 0, function() {
                o = !1
            }
            )) : (h[j - 1].addClass("active"),
            e = f[((k - i - 1) % f.length + f.length) % f.length].$element,
            -1 != h.indexOf(e) && (e = e.clone()),
            h.unshift(e),
            g = h.pop(),
            b.leave(g),
            b.enter(e, l, l.find("li:first-child"), function() {
                o = !1
            }
            )),
            k = c) : (r(a),
            o = !1)
        }
    }
    )
}
]).directive("csfRadioCarousel", [function() {
    return {
        restrict: "EA",
        transclude: !0,
        replace: !0,
        controller: "RadioCarouselCtrl",
        require: ["ngModel", "csfRadioCarousel"],
        templateUrl: "static/templates/csf-radio-carousel.html",
        scope: {
            ngModel: "\x3dngModel",
            optionTemplate: "@",
            slidesNo: "\x3d",
            editable: "\x3d"
        },
        link: {
            pre: function(a, b, c, d) {
                a = b.find(".slides");
                d[1].register(a)
            },
            post: function() {}
        }
    }
}
]).directive("csfRcOption", function() {
    return {
        require: "^csfRadioCarousel",
        restrict: "EA",
        replace: !0,
        templateUrl: "static/templates/csf-rc-option.html",
        scope: {
            value: "\x3d",
            last: "\x3d",
            item: "\x3d",
            active: "\x3d"
        },
        link: function(a, b, c, d) {
            d.addOption(a,
            b);
            a.$on("$destroy", function() {
                d.removeOption(a)
            }
            );
            a.$watch("active", function(b) {
                b && d.setActive(a)
            }
            )
        }
    }
}
);
angular.module("commonDirectives").directive("csfRef", ["$compile", function(a) {
    return {
        restrict: "A",
        link: function(b, c, d) {
            if (d = document.getElementById(d.csfRef))
                d = angular.element(d),
                c.html(d.html()),
                a(c.contents())(b)
        }
    }
}
]);
"use strict";
var DEFAULT_SLIDE_TIME = 1E3;
angular.module("commonDirectives").directive("csfScrollTo", [function() {
    return {
        restrict: "EA",
        scope: {
            csfScrollTo: "\x3d",
            csfScrollTime: "@"
        },
        link: function(a, b) {
            a.$watch("csfScrollTo", function(c) {
                if (c) {
                    c = b.offset().top;
                    var d = 1 * a.csfScrollTime || DEFAULT_SLIDE_TIME;
                    a.csfScrollTo = !1;
                    angular.element("html,body").animate({
                        scrollTop: c
                    }, d)
                }
            }
            )
        }
    }
}
]).directive("csfScrollClick", [function() {
    return {
        restrict: "EA",
        scope: {
            csfScrollClick: "@",
            csfScrollTime: "@"
        },
        link: function(a, b) {
            b.click(function() {
                var b = angular.element(a.csfScrollClick);
                if (0 !== b.length) {
                    var b = b.offset().top
                      , d = 1 * a.csfScrollTime || DEFAULT_SLIDE_TIME;
                    angular.element("html,body").animate({
                        scrollTop: b
                    }, d)
                }
            }
            )
        }
    }
}
]).directive("csfScrollTarget", [function() {
    return {
        restrict: "EA",
        scope: {
            csfScrollTarget: "\x3d",
            csfScrollTime: "@"
        },
        link: function(a) {
            a.$watch("csfScrollTarget", function(b) {
                var c = angular.element(b);
                b && 0 !== c.length && (b = c.offset().top,
                c = 1 * a.csfScrollTime || DEFAULT_SLIDE_TIME,
                a.csfScrollTarget = !1,
                angular.element("html,body").animate({
                    scrollTop: b
                }, c))
            }
            )
        }
    }
}
]);
angular.module("commonDirectives").directive("csfScrollbar", ["$timeout", function(a) {
    return {
        restrict: "A",
        link: function(b, c) {
            a(function() {
                c.perfectScrollbar()
            }
            )
        }
    }
}
]);
angular.module("commonDirectives").directive("csfShowExceededListLimitMessage", ["dictionaryProvider", "$rootScope", function(a) {
    return {
        restrict: "A",
        templateUrl: "static/templates/csf-show-exceeded-list-limit-message.html",
        replace: !0,
        scope: {
            messageCode: "@"
        },
        link: function(b) {
            b.showExceededListLimitMessage = !1;
            b.messageCode || (b.messageCode = "QUERY_MAX_RESULT_INFO");
            b.message = a.getDictionary("D_MESSAGES")[b.messageCode].MESSAGE;
            b.$on("SHOW_EXCEEDED_LIST_LIMIT_MESSAGE", function(a, d) {
                b.showExceededListLimitMessage =
                d
            }
            )
        }
    }
}
]);
angular.module("commonDirectives").constant("csfSliderPaginationDefaults", {
    width: 200,
    itemsPerPage: 10
}).directive("csfSliderPagination", ["$log", "csfSliderPaginationDefaults", "$timeout", function(a, b, c) {
    return {
        restrict: "EA",
        scope: {
            disableSlider: "\x3d",
            width: "@",
            itemsPerPage: "@",
            pagedContentId: "@",
            source: "\x3d",
            paging: "\x3d"
        },
        controller: function() {
            var a = this;
            this.setSlider = function(b) {
                a.slider = b
            }
            ;
            this.getSlider = function() {
                return a.slider
            }
        },
        replace: !0,
        templateUrl: "static/templates/csf-slider-pagination.html",
        link: function(d,
        e, f, g) {
            c(function() {
                function c() {
                    d.paging || (d.paging = {});
                    d.paging.direction = d.paging.direction || null ;
                    d.paging.currentPage = d.paging.currentPage || w;
                    d.paging.list = d.paging.list || null
                }
                function e(b) {
                    a.log(s + t + " onSliderTouch");
                    n(b);
                    if (d.slideMode) {
                        a.log(s + t + " onSliderTouch - [slideMode \x3d true] - update paging");
                        b = b.gesture.touches;
                        for (var c = 0, g = b.length; c < g; c++)
                            m(b[c].pageX),
                            q(),
                            r();
                        d.$apply()
                    }
                    return !1
                }
                function f(b) {
                    a.log(s + t + "touch event");
                    n(b);
                    d.slideMode && (a.log(s + t + "touch event - [slideMode \x3d true] - binding drag event to document"),
                    A.on("touch drag", k));
                    a.log(s + t + "touch event - [slideMode \x3d true] - binding release event to document");
                    A.on("release", l)
                }
                function k(b) {
                    a.log(s + t + " onHandlerDrag");
                    n(b);
                    b = b.gesture.touches;
                    for (var c = 0, e = b.length; c < e; c++)
                        m(b[c].pageX);
                    d.$apply("currentPageDisplay")
                }
                function l(b) {
                    a.log(s + t + " onHandlerRelease");
                    n(b);
                    A.off("release", l);
                    d.slideMode ? (a.log(s + t + " onHandlerRelease - [slideMode \x3d true] - unbinding drag event"),
                    A.off("touch drag", k),
                    q(),
                    r()) : q();
                    d.$apply();
                    return !1
                }
                function n(a) {
                    a.stopPropagation();
                    a.preventDefault();
                    a.gesture && (a.gesture.preventDefault(),
                    a.gesture.stopPropagation())
                }
                function m(a) {
                    var b = B.offset().left;
                    a = a - b + B[0].offsetLeft;
                    a = Math.max(Math.min(a, p), v);
                    a = 100 * ((a - v) / z);
                    b = (w + E * a / 100).toFixed(0);
                    B.css({
                        left: a + "%"
                    });
                    d.currentPageDisplay = b
                }
                function o(a, b, c) {
                    if (!d.disableSlider && (a = Math.max(Math.min(a, d.maxPage), w),
                    d.currentPageDisplay != a || b))
                        B.css({
                            left: 100 * (((a - 1) * (p / (d.maxPage - 1)) - v) / z) + "%"
                        }),
                        d.currentPageDisplay = a,
                        r(c)
                }
                function q() {
                    d.disableSlider || (d.slideMode = !d.slideMode,
                    u.css({
                        width: d.slideMode ?
                        p : "0px"
                    }))
                }
                function r(a) {
                    d.currentPage = d.currentPageDisplay;
                    d.paging.currentPage = d.currentPage;
                    d.paging.list = d.source.slice((d.currentPage - 1) * d.itemsPerPage, d.currentPage * d.itemsPerPage);
                    d.paging.direction = a
                }
                var s = "[csf-slider-pagination]"
                  , t = "[csfSliderPagination link]"
                  , u = g.getSlider()
                  , B = u.$handler
                  , w = 1
                  , E = 0
                  , v = 0
                  , p = d.width || b.width
                  , z = p - v;
                c();
                d.slideMode = !1;
                d.maxPage = 1;
                d.currentPage = d.paging.currentPage;
                d.currentPageDisplay = d.paging.currentPage;
                d.nextPage = function() {
                    o(parseInt(d.currentPage) + 1, !1, "right")
                }
                ;
                d.prevPage = function() {
                    o(parseInt(d.currentPage) - 1, !1, "left")
                }
                ;
                d.$on("$destroy", function() {
                    D.off("touch", f);
                    y.off("touch", e);
                    A.off("touch drag", k);
                    A.off("release", l)
                }
                );
                var D = Hammer(B[0], {
                    drag_max_touches: 0
                })
                  , y = Hammer(u[0])
                  , A = Hammer(document, {
                    drag_max_touches: 0
                });
                d.$watchCollection("source", function() {
                    if (d.source) {
                        var b = w;
                        d.paging ? (b = void 0 != d.paging.index ? Math.ceil(d.paging.index / d.itemsPerPage) : d.currentPage,
                        d.paging.index = void 0) : c();
                        a.log(s + t + " source watch");
                        d.maxPage = Math.ceil(d.source.length /
                        d.itemsPerPage);
                        E = d.maxPage - w;
                        o(b, !0)
                    }
                }
                );
                D.on("touch", f);
                y.on("touch", e);
                var F = document.getElementById(d.pagedContentId);
                if (F) {
                    a.log(s + t + " binding swipe event to " + d.pagedContentId);
                    var x = Hammer(F, {
                        drag_max_touches: 1
                    }), G = function(b) {
                        a.log(s + t + d.pagedContentId + " swipeleft ");
                        n(b);
                        b.gesture.stopDetect();
                        d.nextPage();
                        C();
                        d.$apply()
                    }
                    , H = function(b) {
                        a.log(s + t + d.pagedContentId + " swiperight ");
                        n(b);
                        b.gesture.stopDetect();
                        d.prevPage();
                        C();
                        d.$apply()
                    }
                    , C = function() {
                        x.off("dragleft swipeleft", G);
                        x.off("dragright swiperight",
                        H)
                    }
                    , I;
                    x.on("touch", function(a) {
                        I = a.target;
                        "INPUT" != I.tagName && ("SELECT" != I.tagName && "OPTION" != I.tagName) && (x.on("dragleft swipeleft", G),
                        x.on("dragright swiperight", H))
                    }
                    );
                    x.on("release", function() {
                        C()
                    }
                    );
                    d.$on("$destroy", function() {
                        C()
                    }
                    )
                }
            }
            )
        }
    }
}
]).directive("csfSlider", [function() {
    return {
        require: "^csfSliderPagination",
        restrict: "A",
        controller: ["$scope", "$element", function(a, b) {
            this.setHandler = function(a) {
                b.$handler = a
            }
        }
        ],
        link: function(a, b, c, d) {
            d.setSlider(b)
        }
    }
}
]).directive("csfSliderHandler", [function() {
    return {
        require: "^csfSlider",
        restrict: "A",
        link: function(a, b, c, d) {
            d.setHandler(b)
        }
    }
}
]);
angular.module("commonDirectives").controller("SpeechInputController", ["$scope", function(a) {
    a.isRecognizing = !1;
    a.speechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition || null ;
    if (null  != a.speechRecognition) {
        var b = new a.speechRecognition;
        b.onstart = function() {
            a.$apply(function(a) {
                a.isRecognizing = !0
            }
            )
        }
        ;
        b.onend = function() {
            a.$apply(function(a) {
                a.isRecognizing = !1
            }
            )
        }
        ;
        b.onresult = function(b) {
            0 < b.results.length && (a.model = b.results[0][0].transcript,
            a.callFunction && a.callFunction({
                $value: a.model
            }))
        }
        ;
        a.start = function() {
            a.isRecognizing ? b.stop() : b.start()
        }
    }
}
]).directive("csfSpeechInput", [function() {
    return {
        restrict: "E",
        templateUrl: "static/templates/csf-speech-input.html",
        require: "ngModel",
        controller: "SpeechInputController",
        scope: {
            model: "\x3dngModel",
            callFunction: "\x26"
        },
        replace: !0,
        link: function() {}
    }
}
]);
angular.module("commonDirectives").controller("TilesCtrl", ["$scope", "dictionaryFilter", function(a, b) {
    a.tile = a.tiles[0];
    a.tilesList = a.tiles;
    a.views = ["boxes", "list", "details"];
    a.showContent = function(c) {
        "ART" === c.type ? (a.view = a.views[2],
        a.tile = c) : (a.view = a.views[1],
        a.tilesList = b(c.name))
    }
    ;
    a.showBack = function() {
        return a.view !== a.views[0]
    }
    ;
    a.backView = function() {
        a.view = a.views[0]
    }
    ;
    null  !== a.defaultTileDetailsIndex && a.tilesList.length > a.defaultTileDetailsIndex ? a.showContent(a.tilesList[a.defaultTileDetailsIndex]) :
    a.view = a.views[0];
    1 === a.tilesList.length && a.showContent(a.tilesList[0])
}
]).directive("csfTiles", [function() {
    return {
        restrict: "AE",
        controller: "TilesCtrl",
        link: function(a, b) {
            b.addClass("csf-tiles")
        }
    }
}
]).directive("csfTilesBox", [function() {
    return {
        require: "^csfTiles",
        restrict: "AE",
        templateUrl: "static/templates/csf-tiles/csf-tiles-box.html",
        replace: !0,
        scope: !1
    }
}
]).directive("csfTilesList", [function() {
    return {
        require: "^csfTiles",
        restrict: "AE",
        templateUrl: "static/templates/csf-tiles/csf-tiles-list.html",
        replace: !0,
        link: function(a, b, c) {
            a.moreMsg = c.moremsg
        }
    }
}
]).directive("csfTilesDetails", [function() {
    return {
        require: "^csfTiles",
        restrict: "E",
        templateUrl: "static/templates/csf-tiles/csf-tiles-details.html",
        replace: !0,
        scope: !1
    }
}
]);
angular.module("commonDirectives").directive("csfTooltip", ["$log", function() {
    return {
        restrict: "A",
        scope: {
            data: "@",
            position: "@",
            tooltipUrl: "@"
        },
        templateUrl: "static/templates/csf-tooltip.html",
        transclude: !0,
        replace: !0,
        controller: ["$scope", "$element", function(a, b) {
            this.showTooltip = function(d, c, f, g) {
                d && (a.data = d);
                a.position = {};
                c && (a.position.x = c);
                f && (a.position.y = f);
                a.customClassName = g ? g : "";
                a.$apply();
                d = b[0].querySelector(".csf-tooltip-wrapper");
                c && (d.style.left = c + "px");
                f && (d.style.top = f + "px");
                d.style.display =
                "block"
            }
            ;
            this.hideTooltip = function() {
                var c = b[0].querySelector(".csf-tooltip-wrapper");
                a.customClassName = "";
                c && (c.style.display = "none")
            }
            ;
            this.getTooltipWidth = function(a) {
                return $(b[0].querySelector("." + a)).outerWidth()
            }
            ;
            var c;
            this.saveTooltip = function(a, b, f) {
                c = {
                    d: a,
                    x: b,
                    y: f
                }
            }
            ;
            this.clearSavedTooltip = function() {
                c = void 0
            }
            ;
            this.hideOrRestoreLastTooltip = function() {
                c ? this.showTooltip(c.d, c.x, c.y) : this.hideTooltip()
            }
        }
        ],
        link: function(a, b, c, d) {
            a.hideTooltip = function() {
                d.clearSavedTooltip();
                d.hideTooltip()
            }
        }
    }
}
]);
angular.module("commonDirectives").directive("csfTransclude", function() {
    return {
        restrict: "EAC",
        link: function(a, b, c, d, e) {
            if (!e)
                throw "Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found.";
            switch (c.csfTransclude || "sibling") {
            case "sibling":
                e(function(a) {
                    b.empty();
                    b.append(a)
                }
                );
                break;
            case "parent":
                e(a, function(a) {
                    b.empty();
                    b.append(a)
                }
                );
                break;
            case "child":
                var f = a.$new();
                e(f, function(a) {
                    b.empty();
                    b.append(a);
                    b.on("$destroy", function() {
                        f.$destroy()
                    }
                    )
                }
                )
            }
        }
    }
}
);
angular.module("commonDirectives").directive("csfTypeahead", ["$compile", "$parse", "$q", "$timeout", "$document", function(a, b, c, d, e) {
    var f = [9, 13, 27, 38, 40];
    return {
        require: "ngModel",
        link: function(g, h, i, j) {
            var k = g.$eval(i.typeaheadMinLength);
            0 != k && (k = k || 1);
            var l = g.$eval(i.typeaheadWaitMs) || 0, n = !1 !== g.$eval(i.typeaheadEditable), m = b(i.typeaheadLoading).assign || angular.noop, o = b(i.typeaheadOnSelect), q = i.typeaheadInputFormatter ? b(i.typeaheadInputFormatter) : void 0, r = i.typeaheadAppendToBody ? g.$eval(i.typeaheadAppendToBody) :
            !1, s = !1 !== g.$eval(i.typeaheadFocusFirst), t = b(i.ngModel).assign, u, B = i.csfTypeahead, w = B.match(/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/);
            if (!w)
                throw Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "' + B + '".');
            u = {
                itemName: w[3],
                source: b(w[4]),
                viewMapper: b(w[2] || w[1]),
                modelMapper: b(w[1])
            };
            if (i.typeaheadPromise)
                var E = b(i.typeaheadPromise);
            var v, p = g.$new();
            p.maxMatchesDisplay = i.maxMatchesDisplay ?
            i.maxMatchesDisplay : 10;
            g.$on("$destroy", function() {
                p.$destroy()
            }
            );
            var z = "typeahead-" + p.$id + "-" + Math.floor(1E4 * Math.random());
            h.attr({
                "aria-autocomplete": "list",
                "aria-expanded": !1,
                "aria-owns": z
            });
            var D = angular.element("\x3cdiv csf-typeahead-popup\x3e\x3c/div\x3e");
            p.infoArgs = g[i.typeaheadInfoArgs];
            i.typeaheadInfoArgs && g.$watch(function(a) {
                return a[i.typeaheadInfoArgs]
            }
            , function(a) {
                p.infoArgs = a
            }
            );
            D.attr({
                id: z,
                matches: "matches",
                active: "activeIdx",
                select: "select(activeIdx)",
                query: "query",
                position: "position",
                info: i.typeaheadInfo,
                infoargs: "infoArgs"
            });
            angular.isDefined(i.typeaheadTemplateUrl) && D.attr("template-url", i.typeaheadTemplateUrl);
            var y = function() {
                p.matches = [];
                p.activeIdx = -1;
                h.attr("aria-expanded", !1)
            }
            ;
            p.$watch("activeIdx", function(a) {
                0 > a ? h.removeAttr("aria-activedescendant") : h.attr("aria-activedescendant", z + "-option-" + a)
            }
            );
            var A = function(a) {
                var b = {
                    $viewValue: a
                };
                m(g, !0);
                c.when(u.source(g, b)).then(function(c) {
                    var d = a === j.$viewValue || void 0 === j.$viewValue;
                    if (d && v)
                        if (c && 0 < c.length) {
                            p.activeIdx = s ?
                            0 : -1;
                            for (var e = p.matches.length = 0; e < c.length; e++)
                                b[u.itemName] = c[e],
                                p.matches.push({
                                    id: z + "-option-" + e,
                                    label: u.viewMapper(p, b),
                                    model: c[e]
                                });
                            p.query = a;
                            p.position = r ? h.offset() : h.position();
                            p.position.top += h.prop("offsetHeight");
                            h.attr("aria-expanded", !0);
                            1 === p.matches.length && p.matches[0].label.toUpperCase() === a.toUpperCase() && p.select(0)
                        } else
                            y();
                    d && m(g, !1)
                }
                , function() {
                    y();
                    m(g, !1)
                }
                )
            }
              , F = function(a) {
                E ? E(g, {
                    $item: a
                }).then(function() {
                    A(a)
                }
                ) : A(a)
            }
            ;
            y();
            p.query = void 0;
            var x, G = function(a) {
                v = !0;
                a.length >= k ?
                0 < l ? (x && d.cancel(x),
                x = d(function() {
                    F(a)
                }
                , l)) : F(a) : (m(g, !1),
                x && d.cancel(x),
                y());
                if (n)
                    return a;
                if (a)
                    j.$setValidity("editable", !1);
                else
                    return j.$setValidity("editable", !0),
                    a
            }
            ;
            j.$parsers.unshift(G);
            j.$formatters.push(function(a) {
                var b, c;
                c = {};
                n || j.$setValidity("editable", !0);
                if (q)
                    return c.$model = a,
                    q(g, c);
                c[u.itemName] = a;
                b = u.viewMapper(g, c);
                c[u.itemName] = void 0;
                c = u.viewMapper(g, c);
                return b !== c ? b : a
            }
            );
            p.select = function(a) {
                var b = {}, c;
                b[u.itemName] = c = p.matches[a].model;
                a = u.modelMapper(g, b);
                t(g, a);
                j.$setValidity("editable",
                !0);
                j.$setValidity("parse", !0);
                o(g, {
                    $item: c,
                    $model: a,
                    $label: u.viewMapper(g, b)
                });
                y();
                d(function() {
                    h[0].focus()
                }
                , 0, !1)
            }
            ;
            h.click(function() {
                G(this.value)
            }
            );
            h.bind("keydown", function(a) {
                0 === p.matches.length || -1 === f.indexOf(a.which) || -1 == p.activeIdx && (13 === a.which || 9 === a.which) || (a.preventDefault(),
                40 === a.which ? (p.activeIdx = (p.activeIdx + 1) % p.matches.length,
                p.$digest()) : 38 === a.which ? (p.activeIdx = (0 < p.activeIdx ? p.activeIdx : p.matches.length) - 1,
                p.$digest()) : 13 === a.which || 9 === a.which ? p.$apply(function() {
                    p.select(p.activeIdx)
                }
                ) :
                27 === a.which && (a.stopPropagation(),
                y(),
                p.$digest()))
            }
            );
            h.bind("blur", function() {
                v = !1;
                i.clearonempty && "" === this.value && o(g, {
                    $model: null
                })
            }
            );
            var H = function(a) {
                h[0] !== a.target && (y(),
                p.$digest())
            }
            ;
            e.bind("click", H);
            g.$on("$destroy", function() {
                e.unbind("click", H);
                r && C.remove();
                D.remove()
            }
            );
            var C = a(D)(p);
            r ? e.find("body").append(C) : h.after(C)
        }
    }
}
]).directive("csfTypeaheadPopup", ["$timeout", "messageService", "csfUtils", function(a, b, c) {
    return {
        restrict: "EA",
        scope: {
            matches: "\x3d",
            query: "\x3d",
            active: "\x3d",
            position: "\x3d",
            select: "\x26",
            infoargs: "\x3d"
        },
        replace: !0,
        templateUrl: "static/templates/csf-typehead/csf-typeahead-popup.html",
        link: function(d, e, f) {
            d.maxMatchesDisplay = d.$parent.maxMatchesDisplay;
            f.info && b.getMessage(f.info).then(function(a) {
                d.typeaheadInfo = a
            }
            );
            d.$watch("infoargs", function(a) {
                a && b.getMessage(f.info).then(function(b) {
                    d.typeaheadInfo = c.replaceInMessage(b, {
                        1: a[0],
                        2: a[1]
                    })
                }
                )
            }
            );
            d.templateUrl = f.templateUrl;
            d.$watch("matches", function() {
                a(function() {
                    e.perfectScrollbar("update")
                }
                , 0)
            }
            );
            d.isOpen = function() {
                return 0 <
                d.matches.length
            }
            ;
            d.isActive = function(a) {
                return d.active == a
            }
            ;
            d.selectActive = function(a) {
                d.active = a
            }
            ;
            d.selectMatch = function(a) {
                d.select({
                    activeIdx: a
                })
            }
        }
    }
}
]).directive("csfTypeaheadMatch", ["$http", "$templateCache", "$compile", "$parse", function(a, b, c, d) {
    return {
        restrict: "EA",
        scope: {
            index: "\x3d",
            match: "\x3d",
            query: "\x3d"
        },
        link: function(e, f, g) {
            g = d(g.templateUrl)(e.$parent) || "static/templates/csf-typehead/csf-typeahead-match.html";
            a.get(g, {
                cache: b
            }).success(function(a) {
                c(a.trim())(e, function(a) {
                    f.replaceWith(a)
                }
                )
            }
            )
        }
    }
}
]);
angular.module("commonDirectives").directive("csfViewValueWatch", [function() {
    return {
        restrict: "A",
        require: "ngModel",
        scope: {
            watchProperty: "\x3dcsfViewValueWatch"
        },
        link: function(a, b, c, d) {
            a.$watch("watchProperty", function(a) {
                d.$setViewValue(a);
                b.val(a)
            }
            )
        }
    }
}
]);
"use strict";
angular.module("commonDirectives").directive("csfWaterfall", ["$animate", function(a) {
    return {
        restrict: "EA",
        transclude: !0,
        templateUrl: "static/templates/csf-waterfall.html",
        scope: {
            orginalItems: "\x3dcsfWaterfall",
            active: "\x3d",
            number: "@cascadeNumber",
            repeat: "\x3d",
            step: "@"
        },
        controller: ["$scope", function(b) {
            var c = this;
            c.listParent = null ;
            b.itemsAll = [];
            b.$watch("orginalItems", function(a) {
                c.destroyScope();
                c.listParent.children().remove();
                b.itemsAll = angular.copy(a);
                c.index = -b.number;
                c.slide(b.number)
            }
            );
            b.$watch("active",
            function(a) {
                isNaN(a) ? angular.isObject(a) && (a = b.orginalItems.indexOf(a),
                -1 !== a && c.slide(a - c.index)) : c.slide(a - c.index)
            }
            );
            c.slide = function(d) {
                d *= 1;
                var e = b.itemsAll.length
                  , f = 0 < d
                  , g = 0;
                Math.abs(d) > b.number && (c.index = c.index + d - b.number * (f ? 1 : -1),
                d = b.number * (f ? 1 : -1),
                c.destroyScope());
                for (var h = c.index + (f ? 1 * b.number : -1), i = h, j; i !== h + d; i += f ? 1 : -1,
                g++) {
                    var k, l;
                    if (!b.repeat && !(0 <= i && i < e))
                        break;
                    j = 0 <= i ? i % e : e - 1 + (i + 1) % e;
                    l = b.$parent ? b.$parent.$new() : b.$new();
                    l.$index = j;
                    l.item = b.itemsAll[j];
                    b.itemsAll[j].$scope = l;
                    f ? (c.transclude(l,
                    function(d) {
                        var g, f;
                        c.listParent.append(d).removeClass("move-up");
                        k = c.listParent.children();
                        k.length < b.number || (g = angular.element(k[k.length - 1 - b.number]),
                        f = 0 <= c.index ? c.index % e : e - 1 + (c.index + 1) % e,
                        g && a.addClass(g, "remove", function() {
                            g.remove();
                            c.destroyScope(f)
                        }
                        ))
                    }
                    ),
                    c.index++) : (c.transclude(l, function(d) {
                        var g, f;
                        c.listParent.prepend(d).addClass("move-up");
                        k = c.listParent.children();
                        k.length - 1 < b.number || (g = angular.element(k[b.number]),
                        f = 0 <= c.index + 1 * b.number - 1 ? (c.index + 1 * b.number - 1) % e : e - 1 + (c.index + 1 *
                        b.number - 1 + 1) % e,
                        g && a.addClass(g, "remove", function() {
                            g.remove();
                            c.destroyScope(f)
                        }
                        ))
                    }
                    ),
                    c.index--)
                }
            }
            ;
            c.destroyScope = function(a) {
                if (void 0 === a)
                    for (a = c.index; a < c.index + b.number; a++)
                        b.itemsAll && (b.itemsAll[a] && b.itemsAll[a].$scope) && b.itemsAll[a].$scope.$destroy();
                else
                    b.itemsAll && (b.itemsAll[a] && b.itemsAll[a].$scope) && b.itemsAll[a].$scope.$destroy()
            }
            ;
            b.next = function() {
                c.slide(b.step || 1)
            }
            ;
            b.back = function() {
                c.slide(-(b.step || 1))
            }
            ;
            b.hasNext = function() {
                return !b.repeat && c.index < b.itemsAll.length - b.number
            }
            ;
            b.hasBack = function() {
                return !b.repeat && 0 < c.index
            }
            ;
            c.transclude = null
        }
        ],
        link: function(a, c, d, e, f) {
            e.transclude = f;
            e.listParent = c.find("menu")
        }
    }
}
]);
"use strict";
angular.module("csf.modal").service("$csfModalConfig", ["$log", function(a) {
    var b = {};
    this.state = function(c, d) {
        a.debug("Registering modal state: ", c, d);
        b[c] = d;
        return this
    }
    ;
    this.getState = function(a) {
        return b[a]
    }
}
]).service("$csfModal", ["$csfModalConfig", "$templateFactory", "$q", "$log", "$rootScope", function(a, b, c, d, e) {
    var f = {
        templateUrl: "",
        controller: ""
    };
    this.$currentState = f;
    this.currentStateName = "";
    var g = {};
    this.params = function(a, b) {
        g[a] = b
    }
    ;
    this.getParams = function(a) {
        return g[a]
    }
    ;
    this.show = function(c) {
        d.debug("Getting modal state: ",
        c);
        var g = a.getState(c);
        g.locals ? (this.$currentState = g,
        e.$broadcast("$csfModalStateChangeSuccess")) : (b.fromUrl(g.templateUrl).then(function(a) {
            g.locals = {
                $template: a,
                $$controller: g.controller
            };
            e.$broadcast("$csfModalStateChangeSuccess")
        }
        ),
        this.$currentState = g);
        this.currentStateName = c
    }
    ;
    this.hide = function() {
        this.$currentState = f;
        this.currentStateName = "";
        e.$broadcast("$csfModalStateChangeSuccess")
    }
    ;
    this.hideOnBack = function(a) {
        this.$currentState != f && (this.hide(),
        a.preventDefault())
    }
}
]).directive("csfModalView",
["$csfModal", "$compile", "$controller", "$animate", "$log", function(a, b, c, d, e) {
    var f = !1;
    return {
        restrict: "ECA",
        terminal: !0,
        priority: 999,
        transclude: !0,
        compile: function(g, h, i) {
            return function(g, h) {
                var l, n, m = i(g), o = {
                    remove: function(a) {
                        a.html("")
                    },
                    restore: function(a, b) {
                        b.append(a)
                    },
                    populate: function(a, b) {
                        b.html(a);
                        return b.contents()
                    }
                };
                h.append(m);
                g.$on("$csfModalStateChangeSuccess", function() {
                    if (!f) {
                        f = !0;
                        try {
                            var i = a.$currentState && a.$currentState.locals;
                            if (i === n)
                                h.addClass("active");
                            else if (o.remove(h),
                            l && (l.$destroy(),
                            l = null ),
                            i) {
                                n = i;
                                e.debug("compile - start");
                                var r = b(o.populate(i.$template, h));
                                e.debug("compile - end");
                                l = g.$new();
                                if (i.$$controller) {
                                    i.$scope = l;
                                    var s = c(i.$$controller, i);
                                    h.children().data("$ngControllerController", s)
                                }
                                r(l);
                                d.addClass(h, "active", function() {
                                    g.$broadcast("$csfModalLoaded")
                                }
                                )
                            } else
                                n = null ,
                                h.removeClass("active"),
                                o.restore(m, h)
                        } catch (t) {
                            throw f = !1,
                            t;
                        }
                        f = !1
                    }
                }
                )
            }
        }
    }
}
]);
"use strict";
angular.module("commonServices").service("csfUtils", ["$filter", "$rootScope", "dateTypeValues", "timeProvider", function(a, b, c, d) {
    var e = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
      , f = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    this.isInArray = function(a, b) {
        for (var c = 0; c < b.length; c++)
            if (b[c] === a)
                return !0;
        return !1
    }
    ;
    this.isInArrayWithProperty = function(a, b, c) {
        for (var d = 0; d < b.length; d++)
            if (b[d][c] === a)
                return !0;
        return !1
    }
    ;
    this.isTomorrow = function(a) {
        var b = this.getCurrentDate();
        b.setDate(b.getDate() + 1);
        a = new Date(a);
        a.setHours(0,
        0, 0, 0);
        return b.toDateString() === a.toDateString()
    }
    ;
    this.isYesterday = function(a) {
        var b = this.getCurrentDate();
        b.setDate(b.getDate() - 1);
        a = new Date(a);
        a.setHours(0, 0, 0, 0);
        return b.toDateString() === a.toDateString()
    }
    ;
    this.isToday = function(a) {
        var b = this.getCurrentDate();
        return a.toDateString() === b.toDateString()
    }
    ;
    this.isTimeBeforeOrNow = function(a) {
        var b = this.getCurrentTime();
        return a <= b
    }
    ;
    this.getCurrentDate = function() {
        var a = new Date(d.getServerTime());
        a.setHours(0, 0, 0, 0);
        return a
    }
    ;
    this.getCurrentTime = function() {
        return d.getServerTime()
    }
    ;
    this.getDateObject = function(a) {
        a = new Date(a);
        a.setHours(0, 0, 0, 0);
        return a
    }
    ;
    this.isHoliday = function(d) {
        var e = a("date");
        return void 0 !== b.dictionary.D_HOLIDAYS[e(d, c.DICTIONARY)]
    }
    ;
    this.isWeekend = function(a) {
        return !(a.getDay() % 6)
    }
    ;
    this.getNextWorkingDay = function(a) {
        for (; this.isWeekend(a) || this.isHoliday(a); )
            this.addDays(a, 1);
        return a
    }
    ;
    this.getNextWorkingDayForPayment = function(a) {
        a = this.isAfterCutOff(a);
        var b = this.getCurrentDate();
        for (a && this.addDays(b, 1); this.isWeekend(b) || this.isHoliday(b); )
            this.addDays(b,
            1);
        return b
    }
    ;
    this.countRemainingWorkingDays = function(a) {
        var b = this.getCurrentDate();
        a = angular.copy(a);
        a.setHours(0, 0, 0, 0);
        for (var c = 0; b < a; )
            !this.isWeekend(b) && !this.isHoliday(b) && (c += 1),
            this.addDays(b, 1);
        return 0 < c ? c - 1 : 0
    }
    ;
    this.isAfterTime = function(a) {
        if (a) {
            a = a.split(":");
            var b = new Date
              , c = new Date;
            c.setHours(a[0], a[1]);
            return b > c
        }
        return !1
    }
    ;
    this.isAfterCutOff = function() {
        return !1
    }
    ;
    this.getPreviousWorkingDay = function(a) {
        for (; this.isHoliday(a); )
            this.addDays(a, -1);
        return a
    }
    ;
    this.addMonths = function(a, b) {
        var c =
        a.getDate();
        a.setDate(1);
        a.setMonth(a.getMonth() + 1 * b);
        a.setDate(Math.min(c, this.getDaysInMonth(a.getFullYear(), a.getMonth())));
        return a
    }
    ;
    this.getDateByMonthOffset = function(a) {
        return this.addMonths(this.getCurrentDate(), a)
    }
    ;
    this.getDateByDayOffset = function(a) {
        return this.addDays(this.getCurrentDate(), a)
    }
    ;
    this.isLeapYear = function(a) {
        return 0 === a % 4 && 0 !== a % 100 || 0 === a % 400
    }
    ;
    this.getDaysInMonth = function(a, b) {
        return this.isLeapYear(a) ? f[b] : e[b]
    }
    ;
    this.addDays = function(a, b) {
        a.setDate(a.getDate() + 1 * b);
        return a
    }
    ;
    this.getDaysDifference = function(a, b) {
        var c = Math.abs(b.getTime() - a.getTime());
        return Math.ceil(c / 864E5)
    }
    ;
    this.getFullMonthNames = function() {
        var a = b.dictionary.D_MONTHS_NAMES, c = [], d;
        for (d in a)
            a.hasOwnProperty(d) && c.push(a[d].full_name);
        return c
    }
    ;
    this.getShortMonthNames = function() {
        var a = b.dictionary.D_MONTHS_NAMES, c = [], d;
        for (d in a)
            a.hasOwnProperty(d) && c.push(a[d].short_name);
        return c
    }
    ;
    this.getFullDayNames = function() {
        var a = b.dictionary.D_DAY_NAMES, c = [], d;
        for (d in a)
            a.hasOwnProperty(d) && c.push(a[d].full_name);
        return c
    }
    ;
    this.getShortDayNames = function() {
        var a = b.dictionary.D_DAY_NAMES, c = [], d;
        for (d in a)
            a.hasOwnProperty(d) && c.push(a[d].short_name);
        return c
    }
    ;
    this.escapeRegExp = function(a) {
        return a.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$\x26")
    }
    ;
    this.formatMessage = function(a, b) {
        for (var c = 0, d = b.length; c < d; c++)
            a = a.replace("{" + c + "}", b[c]);
        return a
    }
    ;
    this.replaceInMessage = function(a, b) {
        for (var c in b) {
            var d = c;
            isNaN(d) || (d = "[" + d + "]");
            a = a.replace(RegExp("{" + d + "}", "g"), b[c])
        }
        return a
    }
}
]);
"use strict";
angular.module("commonServices").config(["$provide", function(a) {
    a.decorator("csfUtils", ["$delegate", "$rootScope", "paymentTypes", "dictionaryProvider", function(a, c, d, e) {
        a.isAfterCutOff = function(a) {
            var b = e.getDictionary("D_DELIVERY_TIME")[a.type];
            return a.type === d.INTERNAL || a.type === d.DOMESTIC && a.isSGSBAccount ? this.isAfterTime(b.CUT_OFF_SGSB) : a.type === d.FOREIGN ? this.isAfterTime(b.CUT_OFF) : a.type === d.DOMESTIC ? this.isAfterTime(b.CUT_OFF_TODAY) : !1
        }
        ;
        a.getNextWorkingDayForPayment = function(a, b) {
            var c = this.isAfterCutOff({
                type: a,
                isSGSBAccount: b
            })
              , d = this.getCurrentDate();
            for (c && this.addDays(d, 1); this.isWeekend(d) || this.isHoliday(d); )
                this.addDays(d, 1);
            return d
        }
        ;
        a.addWorkingDays = function(c, d) {
            for (var e = 0; e < d; e++)
                c = a.getNextWorkingDay(a.addDays(c, 1));
            return c
        }
        ;
        return a
    }
    ])
}
]);
angular.module("csf.validators").provider("validationRules", [function() {
    this.validationRules = {
        patterns: {},
        valueFunctions: {}
    };
    this.setValidatorValueFunction = function(a, b) {
        this.validationRules.valueFunctions[a] = b
    }
    ;
    this.setValidatorPattern = function(a, b) {
        this.validationRules.patterns[a] = b
    }
    ;
    this.$get = ["$locale", "csfUtils", function(a, b) {
        var c = this.validationRules;
        return {
            getValidatorRules: function(a) {
                return {
                    pattern: c.patterns[a],
                    valueFunction: c.valueFunctions[a]
                }
            },
            getValidatorPattern: function(a) {
                return c.patterns[a]
            },
            getAmountValueFunction: function(c) {
                c = new String(c);
                var e = RegExp(b.escapeRegExp(a.NUMBER_FORMATS.GROUP_SEP), "g")
                  , f = RegExp(b.escapeRegExp(a.NUMBER_FORMATS.DECIMAL_SEP), "g");
                c = c.replace(e, "");
                return c = c.replace(f, ".")
            }
        }
    }
    ]
}
]).constant("compareType", {
    less: "L",
    lessOrEqual: "LE",
    equal: "E",
    greater: "G",
    greaterOrEqual: "GE"
}).directive("utf8", ["validationRules", function(a) {
    return {
        require: "ngModel",
        link: function(b, c, d, e) {
            e.$parsers.unshift(function(b) {
                void 0 != b && 0 < b.length ? a.getValidatorPattern("UTF8").test(b) ?
                e.$setValidity("utf8", !0) : e.$setValidity("utf8", !1) : e.$setValidity("utf8", !0);
                return b
            }
            )
        }
    }
}
]).directive("amount", ["validationRules", "$filter", function(a, b) {
    return {
        require: "ngModel",
        controller: function() {},
        link: function(c, d, e, f) {
            f.$parsers.unshift(function(b) {
                if (void 0 != b && null  != b && 0 < b.length) {
                    var c = a.getValidatorRules("AMOUNT")
                      , d = a.getValidatorRules("AMOUNT_ZERO");
                    if (c.pattern.test(b) || "true" === e.allowZeroAmount && d.pattern.test(b))
                        return f.$setValidity("amount", !0),
                        a.getAmountValueFunction(b);
                    f.$setValidity("amount",
                    !1)
                } else
                    f.$setValidity("amount", !0)
            }
            );
            f.$formatters.unshift(function() {
                if (f.$valid && null  != f.$modelValue && void 0 != f.$modelValue)
                    return b("amount")(f.$modelValue, c.$eval(e.currency))
            }
            );
            d.on("blur", function() {
                f.$valid && (null  != f.$modelValue && void 0 != f.$modelValue) && d.val(b("amount")(f.$modelValue, c.$eval(e.currency)))
            }
            );
            d.on("focus", function() {
                f.$valid && (null  != f.$modelValue && void 0 != f.$modelValue) && d.val(b("amount")(f.$modelValue))
            }
            )
        }
    }
}
]).directive("compareAmount", ["validationRules", "bigDecimal", "compareType",
function(a, b, c) {
    return {
        require: ["ngModel", "^amount"],
        link: function(a, e, f, g) {
            g[0].$parsers.unshift(function(e) {
                for (var i = f.propertyToCompare.split(","), j = f.compareType.split(","), k = e, l = 0, n = i.length; l < n; l++) {
                    var m;
                    m = e;
                    var o = i[l]
                      , q = j[l]
                      , r = a.$eval(o);
                    if (m && r) {
                        var s = b.parse(m)
                          , r = b.parse(r)
                          , s = b.compare(s, r)
                          , r = !1;
                        q === c.equal && 0 === s ? r = !0 : q === c.less && -1 === s ? r = !0 : q === c.lessOrEqual && 1 > s ? r = !0 : q === c.greater && 1 === s ? r = !0 : q === c.greaterOrEqual && 0 <= s && (r = !0);
                        g[0].$setValidity("compareAmount_" + o.replace(/\./g, "_"),
                        r);
                        m = r ? m : void 0
                    } else
                        g[0].$setValidity("compareAmount_" + o.replace(/\./g, "_"), !0);
                    m !== e && (k = m)
                }
                return k !== e ? k : e
            }
            )
        }
    }
}
]).directive("unique", ["$filter", function(a) {
    return {
        require: "ngModel",
        scope: {
            sourceList: "\x3d",
            propertyName: "@",
            objectId: "\x3d",
            watchedProperty: "\x3dngModel"
        },
        link: function(b, c, d, e) {
            b.$watch("watchedProperty", function(c, d) {
                if (c || c != d)
                    0 == c.length ? e.$setValidity("unique", !0) : 0 < a("filter")(b.sourceList, function(a) {
                        return b.objectId && b.objectId != a.id && void 0 != a[b.propertyName] && a[b.propertyName] ==
                        c || !b.objectId && void 0 != a[b.propertyName] && a[b.propertyName] == c ? !0 : !1
                    }
                    ).length ? e.$setValidity("unique", !1) : e.$setValidity("unique", !0)
            }
            )
        }
    }
}
]).directive("csfDate", ["validationRules", "$filter", "$rootScope", "dateUtils", function(a, b, c, d) {
    return {
        require: "ngModel",
        priority: 2,
        controller: function() {},
        link: function(e, f, g, h) {
            h.$parsers.unshift(function(b) {
                if (b) {
                    if (a.getValidatorPattern("DATE").test(b))
                        return h.$setValidity("csfDate", !0),
                        d.stringToDate(b);
                    h.$setValidity("csfDate", !1)
                } else
                    return h.$setValidity("csfDate",
                    !0),
                    b
            }
            );
            h.$formatters.push(function() {
                return b("date")(h.$modelValue, c.formats.date)
            }
            )
        }
    }
}
]).directive("csfCutOff", ["$parse", "$filter", "$rootScope", "dateUtils", "csfUtils", function(a, b, c, d, e) {
    return {
        require: ["ngModel", "csfDate"],
        priority: 1,
        controller: function() {},
        link: function(f, g, h, i) {
            i[0].$parsers.unshift(function(b) {
                if (b) {
                    var c = a(h.csfCutOff)(f);
                    if (d.isFutureDate(b))
                        return i[0].$setValidity("csfCutOff", !0),
                        b;
                    if (e.isAfterCutOff(c)) {
                        i[0].$setValidity("csfCutOff", !1);
                        return
                    }
                    i[0].$setValidity("csfCutOff",
                    !0);
                    return b
                }
                i[0].$setValidity("csfCutOff", !0);
                return b
            }
            );
            i[0].$formatters.push(function() {
                return b("date")(i[0].$modelValue, c.formats.date)
            }
            )
        }
    }
}
]).directive("csfHoliday", ["$parse", "$filter", "$rootScope", "dateUtils", "csfUtils", function(a, b, c, d, e) {
    return {
        require: ["ngModel", "csfDate"],
        controller: function() {},
        link: function(a, d, h, i) {
            i[0].$parsers.unshift(function(a) {
                if (a) {
                    if (!e.isHoliday(a) && !e.isWeekend(a))
                        return i[0].$setValidity("csfHoliday", !0),
                        a;
                    i[0].$setValidity("csfHoliday", !1)
                } else
                    return i[0].$setValidity("csfHoliday",
                    !0),
                    a
            }
            );
            i[0].$formatters.push(function() {
                return b("date")(i[0].$modelValue, c.formats.date)
            }
            )
        }
    }
}
]).directive("csfCompareDate", ["validationRules", "compareType", "dateUtils", function(a, b, c) {
    return {
        require: ["ngModel", "csfDate"],
        link: function(a, e, f, g) {
            g[0].$parsers.push(function(e) {
                for (var i = f.propertyToCompare.split(","), j = f.compareType.split(","), k = e, l = 0, n = i.length; l < n; l++) {
                    var m;
                    m = e;
                    var o = i[l]
                      , q = j[l]
                      , r = a.$eval(o);
                    if (m && r) {
                        var r = c.compare(m, r)
                          , s = !1;
                        q === b.equal && 0 === r ? s = !0 : q === b.less && -1 === r ? s = !0 : q ===
                        b.lessOrEqual && 1 > r ? s = !0 : q === b.greater && 1 === r ? s = !0 : q === b.greaterOrEqual && 0 <= r && (s = !0);
                        g[0].$setValidity("csfCompareDate_" + o.replace(/\./g, "_"), s)
                    } else
                        g[0].$setValidity("csfCompareDate_" + o.replace(/\./g, "_"), !0);
                    m !== e && (k = m)
                }
                return k !== e ? k : e
            }
            )
        }
    }
}
]).directive("phoneMobile", ["validationRules", function(a) {
    return {
        require: "ngModel",
        priority: -1,
        link: function(b, c, d, e) {
            b = function(b) {
                if (e.$isEmpty(b) || a.getValidatorPattern("PHONE_MOBILE").test(b))
                    return e.$setValidity("phoneMobile", !0),
                    b;
                e.$setValidity("phoneMobile",
                !1)
            }
            ;
            e.$formatters.unshift(b);
            e.$parsers.unshift(b)
        }
    }
}
]).directive("integer", ["validationRules", function(a) {
    return {
        require: "ngModel",
        scope: {
            positive: "@"
        },
        link: function(b, c, d, e) {
            e.$parsers.unshift(function(c) {
                var d;
                d = b.positive ? a.getValidatorPattern("POSITIVE_INTEGER") : a.getValidatorPattern("INTEGER");
                e.$isEmpty(c) || d.test(c) ? e.$setValidity("integer", !0) : e.$setValidity("integer", !1);
                return c
            }
            )
        }
    }
}
]).directive("login", ["validationRules", function(a) {
    return {
        require: "ngModel",
        link: function(b, c, d, e) {
            e.$parsers.unshift(function(b) {
                if (void 0 !=
                b && (null  != b && 0 < b.length) && a.getValidatorRules("LOGIN").pattern.test(b))
                    return e.$setValidity("login", !0),
                    b;
                e.$setValidity("login", !1);
                return b
            }
            )
        }
    }
}
]).directive("csfDictionaryCompareAmount", ["compareType", "dictionaryProvider", "validationRules", "bigDecimal", function(a, b, c, d) {
    return {
        require: "ngModel",
        scope: {
            dictName: "@",
            dictField: "@",
            compareType: "@",
            codeProperty: "\x3d"
        },
        link: function(e, f, g, h) {
            h.$parsers.unshift(function(f) {
                var j = b.getDictionary(e.dictName)[e.codeProperty][e.dictField];
                if (f && j) {
                    var j =
                    d.parse(c.getAmountValueFunction(j))
                      , k = d.parse(c.getAmountValueFunction(f))
                      , j = d.compare(j, k)
                      , k = !1;
                    g.compareType == a.equal && 0 === j ? k = !0 : g.compareType == a.less && -1 === j ? k = !0 : g.compareType == a.lessOrEqual && 1 > j ? k = !0 : g.compareType == a.greater && 1 === j ? k = !0 : g.compareType == a.greaterOrEqual && 0 <= j && (k = !0);
                    h.$setValidity("csfDictionaryCompare", k);
                    if (k)
                        return f
                } else
                    h.$setValidity("csfDictionaryCompare", !0)
            }
            )
        }
    }
}
]).directive("postCode", ["validationRules", "$filter", "$rootScope", function(a) {
    return {
        require: "ngModel",
        link: function(b,
        c, d, e) {
            e.$parsers.unshift(function(b) {
                a.getValidatorPattern("POST_CODE").test(b) ? e.$setValidity("postCode", !0) : e.$setValidity("postCode", !1);
                return b
            }
            )
        }
    }
}
]);
"use strict";
angular.module("csf.wallpapers").provider("wallpapers", function() {
    var a = {}, b;
    this.$get = function() {
        return {
            getWallpapers: function() {
                return a
            },
            getWallpaper: function(b) {
                return a[b]
            },
            getWallpaperPath: function() {
                return b
            }
        }
    }
    ;
    this.addWallpaper = function(b, d, e) {
        b = {
            fileName: b,
            thumbnail: d,
            negative: e
        };
        a[b.fileName] = b
    }
    ;
    this.setWallpaperPath = function(a) {
        b = a
    }
}
).directive("csfWallpaperWizard", ["wallpapers", "userContextService", function(a) {
    return {
        restrict: "A",
        transclude: !0,
        replace: !0,
        templateUrl: "views/templates/csf-wallpaper-wizard",
        scope: {
            onWallpaperClick: "\x26",
            showWizard: "\x3d"
        },
        link: function(b) {
            b.wallpapers = a.getWallpapers();
            b.changeWallpaper = function(a) {
                if (b.onWallpaperClick)
                    b.onWallpaperClick({
                        $wallpaper: a
                    })
            }
            ;
            b.$watch("showWizard", function(a) {
                void 0 !== a && (null  !== a && !a && b.expand) && (b.expand = !1)
            }
            )
        }
    }
}
]).directive("csfWallpaperChanger", ["$rootScope", "wallpapers", "userContextService", function(a, b, c) {
    return {
        restrict: "A",
        replace: !1,
        link: function(a, e) {
            var f = b.getWallpapers()
              , g = b.getWallpaperPath();
            a.$watch(function() {
                return c.getWallpaper()
            }
            ,
            function(a) {
                a && (e.css("background-image", "url(" + g + a + ")"),
                f[a].negative ? e.addClass("negative") : e.removeClass("negative"))
            }
            )
        }
    }
}
]);
angular.module("searchFilters").filter("fromDateFilter", ["$filter", function() {
    return function(a, b, c, d) {
        if (!c)
            throw "dateProperty is undefined";
        if (!a || !b)
            return a;
        b = b.getTime();
        for (var e = [], f = 0, g = 0, h = a.length; f < h; f++) {
            var i = a[f];
            if (i[c] >= b && (i[c] > b || d))
                e[g++] = i
        }
        return e
    }
}
]).filter("toDateFilter", ["$filter", function() {
    return function(a, b, c, d) {
        if (!c)
            throw "dateProperty is undefined";
        if (!a || !b)
            return a;
        b = b.getTime();
        for (var e = [], f = 0, g = 0, h = a.length; f < h; f++) {
            var i = a[f];
            if (i[c] <= b && (i[c] < b || d))
                e[g++] = i
        }
        return e
    }
}
]).filter("dateFilter",
["$filter", function(a) {
    return function(b, c, d, e, f) {
        if (!e)
            throw "dateProperty is undefined";
        if (!b || !c && !d)
            return b;
        if (c && !d)
            return a("fromDateFilter")(b, c, e, f);
        if (!c && d)
            return a("toDateFilter")(b, d, e, f);
        for (var g = [], h = 0, i = 0, j = b.length; h < j; h++) {
            var k = b[h];
            if (k[e] >= c && k[e] <= d && (k[e] > c && k[e] < d || f))
                g[i++] = k
        }
        return g
    }
}
]);
"use strict";
angular.module("commonServices").service("dateUtils", ["$filter", "$rootScope", "csfUtils", function(a, b, c) {
    this.getDateTo = function(a) {
        return a ? new Date(a.getTime() + 864E5 - 1) : null
    }
    ;
    this.parseDateOffsetExpr = function(a, b) {
        var c = null
          , g = null ;
        a && (-1 !== a.indexOf("D") ? (c = a.split("D")[0],
        g = "D") : -1 !== a.indexOf("MF") ? (c = a.split("MF")[0],
        g = "MF") : -1 !== a.indexOf("M") && (c = a.split("M")[0],
        g = "M"));
        c = b ? Math.abs(c) : c;
        return {
            $offset: c,
            $offsetType: g
        }
    }
    ;
    this.calculateDatesFromOffsetExpr = function(a) {
        a = this.parseDateOffsetExpr(a);
        return this.calculateDatesFromOffset(a.$offset, a.$offsetType)
    }
    ;
    this.calculateDatesFromOffset = function(a, b) {
        var f = null
          , g = null ;
        "D" === b ? 0 < a ? (f = c.getCurrentDate(),
        g = c.getDateByDayOffset(a)) : (g = c.getCurrentDate(),
        f = c.getDateByDayOffset(a)) : "M" === b ? 0 < a ? (f = c.getCurrentDate(),
        g = c.addDays(c.getDateByMonthOffset(a), -1)) : (g = c.getCurrentDate(),
        f = c.addDays(c.getDateByMonthOffset(a), 1)) : "MF" === b && (f = c.getDateByMonthOffset(a),
        f.setDate(1),
        g = c.getDateByMonthOffset(a),
        g.setDate(c.getDaysInMonth(g.getFullYear(), g.getMonth())));
        return {
            $dateFrom: f,
            $dateTo: this.getDateTo(g)
        }
    }
    ;
    this.dateToString = function(c) {
        return a("date")(c, b.formats.date)
    }
    ;
    this.stringToDate = function(a) {
        return new Date(Date.UTC(parseInt(a.substr(6, 4), 10), parseInt(a.substr(3, 2), 10) - 1, parseInt(a.substr(0, 2), 10), 0, 0, 0, 0))
    }
    ;
    this.compare = function(a, b) {
        if (isNaN(a) || isNaN(b))
            throw Error(a + " - " + b);
        if (a instanceof Date && b instanceof Date) {
            var c = new Date(a.getTime())
              , g = new Date(b.getTime());
            c.setHours(0, 0, 0, 0);
            g.setHours(0, 0, 0, 0);
            return c < g ? -1 : c > g ? 1 : 0
        }
        throw new TypeError(a +
        " - " + b);
    }
    ;
    this.monthsDiff = function(a, b) {
        return 12 * (b.getFullYear() - a.getFullYear()) + (b.getMonth() - a.getMonth())
    }
    ;
    this.dayDelta = function(a, b) {
        return Math.round(Math.abs(b - a) / 864E5)
    }
    ;
    this.isFutureDate = function(a) {
        var b = c.getCurrentDate();
        a.setHours(0, 0, 0, 0);
        return a > b
    }
}
]);
"use strict";
angular.module("commonControllers").controller("DevToolsCtrl", ["$scope", "loggingService", function(a, b) {
    a.startLogging = function() {
        b.startLogging()
    }
}
]);
"use strict";
angular.module("commonServices").factory("dictionary", ["$rootScope", "httpService", function(a, b) {
    return {
        get: function(a) {
            return b.get("dictionary/" + a, a)
        },
        getAll: function() {
            return b.get("dictionaries", "dictionary")
        }
    }
}
]);
"use strict";
angular.module("commonServices").service("dictionaryProvider", ["$filter", function(a) {
    var b = {}
      , c = {}
      , d = function(a) {
        return a.order ? parseInt(a.order) : 0
    }
    ;
    this.setDictionaries = function(a) {
        b = a
    }
    ;
    this.putDictionary = function(a, c) {
        b[a] = c
    }
    ;
    this.getDictionary = function(a) {
        if (a = b[a])
            return a
    }
    ;
    this.getDictionaryByGroup = function(a, b) {
        for (var c = this.getDictionaryAsArray(a, "group"), d = [], i = 0, j = c.length; i < j; i++)
            c[i].group == b && d.push(c[i]);
        return d
    }
    ;
    this.getDictionaryAsArray = function(b, f) {
        var g = f || d
          , h = b + "_" + g
          , i = c[h];
        if (!i) {
            var j =
            this.getDictionary(b)
              , i = [];
            angular.forEach(j, function(a) {
                i.push(a)
            }
            );
            g && (i = a("orderBy")(i, g));
            c[h] = i
        }
        return i
    }
}
]);
"use strict";
angular.module("commonServices").service("dictionaryUtils", [function() {
    this.mapDictionaryValuesWithSeparator = function(a, b) {
        for (var c = {}, d = 0, e = a.length; d < e; d++) {
            var f = a[d].split(b);
            c[f[0]] = f[1]
        }
        return c
    }
    ;
    this.filterEntries = function(a, b) {
        var c = {}, d;
        for (d in a) {
            var e = a[d], f;
            a: {
                f = void 0;
                for (f in b)
                    if (e[f] !== b[f]) {
                        f = !1;
                        break a
                    }
                f = !0
            }
            f && (c[d] = e)
        }
        return c
    }
}
]);
"use strict";
angular.module("casControllers").controller("ErrorCtrl", ["$scope", "$rootScope", "$state", "$route", "$http", "$location", "$window", function() {}
]);
angular.module("commonControllers").controller("ExchangeRateModalCtrl", ["$scope", "$q", "exchangeRatesService", "dictionaryProvider", "csfUtils", "parametersProvider", "userDialogService", "bigDecimal", "$filter", function(a, b, c, d, e, f, g, h, i) {
    function j() {
        g.addMessage({
            type: "error",
            code: "EXCHANGE_CURRENCY_ERROR"
        }, !0)
    }
    function k() {
        c.exchangeCurrencyCrosswise(a.converter.sourceCurrency.coefficient > a.converter.targetCurrency.coefficient ? h.div(a.converter.sourceCurrency.coefficient, a.converter.targetCurrency.coefficient) :
        a.converter.sourceCurrency.coefficient, a.converter.sourceCurrency.code, a.converter.targetCurrency.code, a.nonCashRates).success(function(b) {
            a.converter.sourceToTargetRate = b
        }
        ).error(j);
        c.exchangeCurrencyCrosswise(a.converter.sourceCurrency.coefficient < a.converter.targetCurrency.coefficient ? h.div(a.converter.targetCurrency.coefficient, a.converter.sourceCurrency.coefficient) : a.converter.targetCurrency.coefficient, a.converter.targetCurrency.code, a.converter.sourceCurrency.code, a.nonCashRates).success(function(b) {
            a.converter.targetToSourceRate =
            b
        }
        ).error(j)
    }
    function l(b) {
        for (var c = 0; c < b.length; ) {
            var d = a.D_CSF_CURRENCIES[b[c].isoCode];
            d && "0" === d.visible ? b.splice(c, 1) : c++
        }
        return b
    }
    function n() {
        a.converter.sourceAmount && c.exchangeCurrencyCrosswise(a.converter.sourceAmount, a.converter.sourceCurrency.code, a.converter.targetCurrency.code, a.nonCashRates).success(function(b) {
            a.converter.calculatedAmount = b
        }
        ).error(j)
    }
    function m() {
        c.getArchiveCrossRates(a.converter.sourceCurrency.coefficient > a.converter.targetCurrency.coefficient ? h.div(a.converter.sourceCurrency.coefficient,
        a.converter.targetCurrency.coefficient) : a.converter.sourceCurrency.coefficient, a.converter.sourceCurrency.code, a.converter.targetCurrency.code, a.nonCashRates).then(function(b) {
            a.archivedCrossRates = [];
            for (var c = Object.keys(b.data), d = c.length, e = 0; e < d; e++)
                a.archivedCrossRates[e] = {
                    isoCode: a.converter.sourceCurrency.coefficient + " " + a.converter.sourceCurrency.name,
                    rate: b.data[c[e]],
                    date: parseInt(c[e])
                };
            e = b.data[c[0]];
            b = b.data[c[d - 1]];
            c = b - e;
            a.tendency = 0 < c ? "up" : 0 > c ? "down" : "fixed";
            a.trend = e === b ? i("number")(0,
            2) : i("number")(h.div(b, e), 2)
        }
        )
    }
    a.MAIN_CURRENCIES = "MAIN_CURRENCIES";
    a.ALL_CURRENCIES = "ALL_CURRENCIES";
    a.CURRENCY_CONVERTER = "CURRENCY_CONVERTER";
    a.activeView = a.MAIN_CURRENCIES;
    a.nonCashRates = !1;
    a.POPULARITY_SCALE_0 = "0";
    a.POPULARITY_SCALE_1 = "1";
    a.POPULARITY_SCALE_2 = "2";
    var o = [a.POPULARITY_SCALE_0, a.POPULARITY_SCALE_1, a.POPULARITY_SCALE_2];
    a.systemCurrency = f.getParameter("P_CSF_SYSTEM_CURRENCY");
    a.converter = {
        sourceCurrency: "",
        targetCurrency: "",
        calculatedAmount: 0,
        sourceAmount: ""
    };
    a.basicCurrencies = [];
    a.exchangeRatesPromises = {};
    a.exchangeRates = {};
    a.lastExchangeRatesDate = "";
    a.date = e.getCurrentDate();
    a.endDate = e.getCurrentDate();
    a.D_CSF_CURRENCIES = d.getDictionary("D_CSF_CURRENCIES");
    a.D_CSF_CURRENCIES_ARRAY = d.getDictionaryAsArray("D_CSF_CURRENCIES", "basic");
    d = 0;
    a.changeCashRateType = function() {
        a.nonCashRates = !a.nonCashRates;
        n();
        k();
        m()
    }
    ;
    a.changeDate = function() {
        c.getExchangeRates(e.getDateObject(a.date).toISOString(), a.nonCashRates).then(function(b) {
            a.lastExchangeRates = l(b.data);
            a.lastExchangeRates &&
            0 < a.lastExchangeRates.length && (a.lastExchangeRatesDate = a.lastExchangeRates[0].validFrom)
        }
        )
    }
    ;
    a.loadPopularCurrencies = function() {
        a.activeView = a.MAIN_CURRENCIES;
        var c = a.exchangeRatesPromises;
        a.lastExchangeRates = [];
        b.all(c).then(function(b) {
            for (var c = 0, d = a.basicCurrencies.length; c < d; c++) {
                var e = a.basicCurrencies[c]
                  , f = b[e].data
                  , g = b[e].data.length;
                a.exchangeRates[e] = f;
                a.lastExchangeRates.push(f[g - 1])
            }
            a.lastExchangeRatesDate = a.lastExchangeRates[0].validFrom
        }
        )
    }
    ;
    a.loadAllCurrencies = function() {
        a.activeView =
        a.ALL_CURRENCIES;
        a.lastExchangeRates = a.currentExchangeRates;
        a.lastExchangeRates && 0 < a.lastExchangeRates.length && (a.lastExchangeRatesDate = a.lastExchangeRates[0].validFrom)
    }
    ;
    a.setSourceCurrency = function(b) {
        a.converter.sourceCurrency = b;
        n();
        k();
        m()
    }
    ;
    a.setTargetCurrency = function(b) {
        a.converter.targetCurrency = b;
        n();
        k();
        m()
    }
    ;
    a.convert = function(b) {
        !b || !a.converter.sourceAmount ? a.converter.calculatedAmount = 0 : n()
    }
    ;
    a.swapCurrencies = function() {
        var b = a.converter.sourceCurrency;
        a.converter.sourceCurrency = a.converter.targetCurrency;
        a.converter.targetCurrency = b;
        n();
        k();
        m()
    }
    ;
    for (f = 0; f < a.D_CSF_CURRENCIES_ARRAY.length; )
        if ("0" === a.D_CSF_CURRENCIES_ARRAY[f].visible)
            a.D_CSF_CURRENCIES_ARRAY[f].code !== a.systemCurrency ? a.D_CSF_CURRENCIES_ARRAY.splice(f, 1) : f++;
        else {
            var q = a.D_CSF_CURRENCIES_ARRAY[f];
            !(d > o.length) && -1 !== o.indexOf(q.basic) && (a.basicCurrencies[q.basic] = q.code,
            a.exchangeRatesPromises[q.code] = c.getArchiveExchangeRates(q.code),
            d++);
            f++
        }
    a.converter.sourceCurrency = a.D_CSF_CURRENCIES[a.systemCurrency];
    for (d = 0; d < o.length; d++)
        if (f =
        a.basicCurrencies[d]) {
            a.converter.targetCurrency || (a.converter.targetCurrency = a.D_CSF_CURRENCIES[f]);
            break
        }
    a.converter.targetCurrency || (a.converter.targetCurrency = a.D_CSF_CURRENCIES_ARRAY[0]);
    k();
    a.loadPopularCurrencies();
    c.getExchangeRates(a.date.toISOString()).then(function(b) {
        a.currentExchangeRates = l(b.data);
        a.currentValidFromDate = b.data[0].validFrom
    }
    );
    m()
}
]);
"use strict";
angular.module("commonServices").service("exchangeRatesService", ["httpService", function(a) {
    function b(a) {
        return "exchange/" + (a ? "nonCash/" : "cash/")
    }
    this.getArchiveExchangeRates = function(b) {
        return a.get("exchange/rates/" + b, "exchangeRatesService")
    }
    ;
    this.getExchangeRates = function(b) {
        return a.get("exchange/rates?date\x3d" + b, "exchangeRatesService")
    }
    ;
    this.exchangeToBaseCurrency = function(b, d, e) {
        return e ? a.get("exchange/sell/" + b + "/" + d, "exchangeRatesService") : a.get("exchange/buy/" + b + "/" + d, "exchangeRatesService")
    }
    ;
    this.exchangeCurrencyCrosswise = function(c, d, e, f) {
        return a.get(b(f) + "cross/" + c + "/" + d + "/" + e, "exchangeRatesService")
    }
    ;
    this.exchangeCurrencyCrosswiseReverted = function(c, d, e, f) {
        return a.get(b(f) + "cross/reverted/" + c + "/" + d + "/" + e, "exchangeRatesService")
    }
    ;
    this.getArchiveCrossRates = function(c, d, e, f) {
        return a.get(b(f) + "rates/cross/" + c + "/" + d + "/" + e, "exchangeRatesService")
    }
}
]);
"use strict";
angular.module("commonControllers").factory("groupedLinks", ["dictionaryProvider", function(a) {
    var b = a.getDictionaryAsArray("D_FOOTER_LINKS", "group");
    return function() {
        for (var a = {}, d = 0; d < b.length; d++) {
            var e = b[d];
            (e.group in a ? a[e.group] : a[e.group] = []).push(e)
        }
        return a
    }
}
]).controller("FooterCtrl", ["$scope", "groupedLinks", "parametersProvider", "$csfModal", "$timeout", function(a, b, c, d) {
    a.expanded = !1;
    a.activeModal = !1;
    a.expand = function(b) {
        b && b.stopPropagation();
        a.expanded || (a.activeModal = ".copyright-formula");
        a.expanded = !a.expanded
    }
    ;
    a.showModal = function(b) {
        a.expanded = !1;
        d.show(b);
        a.activeModal = ".container.main"
    }
    ;
    a.sections = b()
}
]);
angular.module("formatFilters").filter("amount", ["$filter", function(a) {
    return function(b, c, d) {
        b = b ? b : "0";
        d = void 0 !== d ? d : 2;
        var e = ""
          , f = ""
          , g = "";
        c && (e = c.prefix.trim(),
        c = c.suffix.trim(),
        e = 0 < e.length ? e + " " : "",
        f = 0 < c.length ? " " + c : "");
        c = Math.abs(b);
        c != b && (g = "- ",
        b = c);
        return g + e + a("number")(b, d) + f
    }
}
]).filter("amountWithCodeCurrency", ["$filter", function(a) {
    return function(b, c) {
        var d = b ? b : "0"
          , e = ""
          , f = ""
          , g = "";
        c && (e = c.prefix.trim(),
        f = c.suffix.trim(),
        e = 0 < e.length ? c.code + " " : "",
        f = 0 < f.length ? " " + c.code : "");
        var h = Math.abs(d);
        h != d && (g = "- ",
        d = h);
        return g + e + a("number")(d, 2) + f
    }
}
]).filter("absAmount", ["$filter", function(a) {
    return function(b, c) {
        void 0 == c && (c = 2);
        var d = Math.abs(b ? b : "0");
        return a("number")(d, c)
    }
}
]).filter("integer", ["$filter", function(a) {
    return function(b) {
        return a("number")(b ? b : "0", 0)
    }
}
]).filter("lineByPipe", ["$filter", function() {
    return function(a, b) {
        return !a ? a : a.replace(/\|/g, b ? b : "\x3cbr/\x3e")
    }
}
]).filter("lineByDot", ["$filter", function() {
    return function(a, b) {
        return !a ? a : a.replace(/\.\s*\t*/g, "." + (b ? b : "\x3cbr/\x3e"))
    }
}
]).filter("firstPipedLine",
["$filter", function() {
    return function(a) {
        return (a ? a : "").split("|")[0]
    }
}
]).filter("secondPipedLine", ["$filter", function() {
    return function(a) {
        return !a ? a : -1 != a.indexOf("|") ? a.split("|")[1] : a
    }
}
]).filter("splitByPipe", function() {
    return function(a) {
        return a.split("|")
    }
}
).filter("iban", ["$filter", function() {
    return function(a) {
        a = a ? a : "";
        for (var b = ""; 4 < a.length; )
            b += a.substring(0, 4) + " ",
            a = a.substring(4);
        0 < a.length && (b += a);
        return b
    }
}
]).filter("phone", ["$filter", function() {
    return function(a) {
        a = a ? a : "";
        var b = ""
          ,
        c = a.length;
        if (12 < c || 9 > c)
            return a;
        9 < c && (b += a.substring(0, c - 9) + " ");
        return b += a.substring(c - 9, c - 7) + " " + a.substring(c - 7, c - 4) + " " + a.substring(c - 4, c - 2) + " " + a.substring(c - 2)
    }
}
]).filter("mobilePhone", ["$filter", function() {
    return function(a) {
        a = a ? a : "";
        var b = ""
          , c = a.length;
        if (12 < c || 9 > c)
            return a;
        9 < c && (b += a.substring(0, c - 9) + " ",
        a = a.substring(c - 9));
        for (; 0 < a.length; )
            b += a.substring(0, 3) + " ",
            a = a.substring(3);
        return b
    }
}
]).filter("truncate", ["$filter", function(a) {
    return function(b, c) {
        if (!b || !c)
            return b;
        var d = b.length >
        c ? "..." : "";
        return a("limitTo")(b, c) + d
    }
}
]).filter("percent", ["$filter", "numberPrecision", "numberPrecisionValue", function(a, b, c) {
    return function(d, e) {
        if (null  != d)
            return void 0 == e && (e = b.PERCENT),
            e == b.PERCENT_EXT ? a("number")(d, c.PERCENT_EXT) + " %" : a("number")(d, c.PERCENT) + " %"
    }
}
]).filter("interestRate", ["$filter", "numberPrecisionValue", function(a, b) {
    return function(c) {
        return a("number")(c, b.INTEREST_RATE)
    }
}
]).filter("exchangeRate", ["$filter", "numberPrecisionValue", function(a, b) {
    return function(c) {
        return a("number")(c ?
        c : "0", b.EXCHANGE_RATE)
    }
}
]).filter("rate", ["$filter", "numberPrecisionValue", function(a, b) {
    return function(c) {
        return a("number")(c ? c : "0", b.EXCHANGE_RATE)
    }
}
]).filter("dateFormat", ["$filter", "dateTypes", "dateTypeValues", function(a, b, c) {
    return function(d, e) {
        if (void 0 == e || e === b.DATE)
            return a("date")(d, c.DATE);
        if (e === b.DATE_LIST_PART1)
            return a("date")(d, c.DATE_LIST_PART1);
        if (e === b.DATE_LIST_PART2)
            return a("date")(d, c.DATE_LIST_PART2);
        if (e === b.DATE_FULL)
            return a("date")(d, c.DATE_FULL);
        if (e === b.DATE_SHORT)
            return a("date")(d,
            c.DATE_SHORT);
        if (e === b.DATE_DESC)
            return a("date")(d, c.DATE_DESC);
        if (e === b.TIME)
            return a("date")(d, c.TIME);
        if (e === b.TIME_SHORT)
            return a("date")(d, c.TIME_SHORT)
    }
}
]);
angular.module("formatFilters").constant("numberPrecision", {
    NORMAL: "NORMAL",
    EXTENDED: "EXTENDED",
    EXCHANGE_RATE: "EXCHANGE_RATE",
    INTEREST_RATE: "INTEREST_RATE",
    PERCENT: "PERCENT",
    PERCENT_EXT: "PERCENT_EXT"
}).constant("numberPrecisionValue", {
    NORMAL: 2,
    EXTENDED: 4,
    EXCHANGE_RATE: 6,
    INTEREST_RATE: 7,
    PERCENT: 2,
    PERCENT_EXT: 2
}).constant("dateTypes", {
    DATE_FULL: "DATE_FULL",
    DATE: "DATE",
    DATE_LIST_PART1: "DATE_LIST_PART1",
    DATE_LIST_PART2: "DATE_LIST_PART2",
    DATE_SHORT: "DATE_SHORT",
    DATE_DESC: "DATE_DESC",
    TIME: "TIME",
    TIME_SHORT: "TIME_SHORT"
}).constant("dateTypeValues",
{
    DATE_FULL: "dd MM yyyy HH:mm:ss",
    DATE: "dd MMM yyyy",
    DATE_LIST_PART1: "dd",
    DATE_LIST_PART2: "MMM yyyy",
    DATE_SHORT: "dd/MM",
    DATE_DESC: "MMM dd, yyyy",
    TIME: "HH:mm:ss",
    TIME_SHORT: "HH:mm"
});
angular.module("formatFilters").constant("numberPrecision", {
    NORMAL: "NORMAL",
    EXTENDED: "EXTENDED",
    EXCHANGE_RATE: "EXCHANGE_RATE",
    INTEREST_RATE: "INTEREST_RATE",
    PERCENT: "PERCENT",
    PERCENT_EXT: "PERCENT_EXT"
}).constant("numberPrecisionValue", {
    NORMAL: 2,
    EXTENDED: 4,
    EXCHANGE_RATE: 6,
    INTEREST_RATE: 7,
    PERCENT: 2,
    PERCENT_EXT: 2
}).constant("dateTypes", {
    DATE_FULL: "DATE_FULL",
    DATE: "DATE",
    DATE_LIST_PART1: "DATE_LIST_PART1",
    DATE_LIST_PART2: "DATE_LIST_PART2",
    DATE_SHORT: "DATE_SHORT",
    DATE_DESC: "DATE_DESC",
    TIME: "TIME",
    TIME_SHORT: "TIME_SHORT"
}).constant("dateTypeValues",
{
    DATE_FULL: "dd MM yyyy HH:mm:ss",
    DATE: "dd MMM yyyy",
    DATE_LIST_PART1: "dd",
    DATE_LIST_PART2: "MMM yyyy",
    DATE_SHORT: "dd/MM",
    DATE_DESC: "MMM dd, yyyy",
    TIME: "HH:mm:ss",
    TIME_SHORT: "HH:mm"
});
angular.module("formatFilters").constant("numberPrecision", {
    NORMAL: "NORMAL",
    EXTENDED: "EXTENDED",
    EXCHANGE_RATE: "EXCHANGE_RATE",
    INTEREST_RATE: "INTEREST_RATE",
    PERCENT: "PERCENT",
    PERCENT_EXT: "PERCENT_EXT"
}).constant("numberPrecisionValue", {
    NORMAL: 2,
    EXTENDED: 4,
    EXCHANGE_RATE: 4,
    INTEREST_RATE: 6,
    PERCENT: 2,
    PERCENT_EXT: 4
}).constant("dateTypes", {
    DATE_FULL: "DATE_FULL",
    DATE: "DATE",
    DATE_LIST_PART1: "DATE_LIST_PART1",
    DATE_LIST_PART2: "DATE_LIST_PART2",
    DATE_SHORT: "DATE_SHORT",
    DATE_DESC: "DATE_DESC",
    TIME: "TIME",
    TIME_SHORT: "TIME_SHORT"
}).constant("dateTypeValues",
{
    DATE_FULL: "dd MMM yyyy HH:mm:ss",
    DATE: "dd MMM yyyy",
    DATE_LIST_PART1: "dd",
    DATE_LIST_PART2: "MMM yyyy",
    DATE_SHORT: "dd/MM",
    DATE_DESC: "MMM dd, yyyy",
    TIME: "HH:mm:ss",
    TIME_SHORT: "HH:mm"
});
"use strict";
angular.module("commonServices").factory("getDataByDateRangeService", ["$log", "userContextService", "$filter", "dateUtils", function(a, b, c, d) {
    return {
        prepareCachedDataObject: function(a, c, d) {
            return {
                list: a,
                requestAttributes: {
                    dateFrom: c,
                    dateTo: d
                },
                isMore: a.length > parseInt(b.getQueryMaxResult()) ? !0 : !1
            }
        },
        prepareResolvedDataObject: function(a, b) {
            return {
                data: a,
                status: b.status,
                headers: b.headers,
                config: b.config
            }
        },
        buildUrl: function(a, b, d) {
            if (!a && !b)
                return d;
            a = a ? c("date")(a, "yyyy-MM-dd") : null ;
            b = b ? c("date")(b, "yyyy-MM-dd") :
            null ;
            return d + (-1 !== d.indexOf("?") ? "\x26" : "?") + (a ? "dateFrom\x3d" + a : "") + (b ? "\x26dateTo\x3d" + b : "")
        },
        prepareListOfCachedRegionPromise: function(b, c) {
            for (var d = [], h = 0, i = b.keys().length; h < i; h++) {
                var j = b.keys()[h];
                angular.isDefined(j) && -1 !== j.indexOf(c) && (j = b.get(j),
                angular.isDefined(j) && d.push(j))
            }
            a.debug("getDataByDateRangeService.prepareListOfCachedRegionPromise: ", "listOfCachedRegionPromise: ", d);
            return d
        },
        hasResponseDataToFilter: function(a, b, c) {
            return !a.data.isMore && a.data.requestAttributes && a.data.requestAttributes.dateFrom &&
            a.data.requestAttributes.dateTo && b && 0 <= d.compare(b, a.data.requestAttributes.dateFrom) && 0 >= d.compare(c, a.data.requestAttributes.dateTo)
        }
    }
}
]);
"use strict";
angular.module("casControllers").controller("GlobalCtrl", ["$scope", "$state", "userContextService", "exchangeRatesService", "dictionaryProvider", "parametersProvider", "socialMedia", "facebook", function(a, b, c, d, e, f, g, h) {
    a.model = {};
    a.attrHolder = {};
    a.showWizard = !1;
    a.mostPopularCurrencyInfo = {};
    a.onWallpaperClick = function(a) {
        c.setWallpaper(a)
    }
    ;
    a.updateModel = function() {
        a._model = angular.copy(a.model)
    }
    ;
    a.ternOffWizard = function() {
        a.showWizard = !1
    }
    ;
    a.reset = function() {
        a.ternOffWizard();
        a.model = {};
        a.attrHolder = {}
    }
    ;
    a.successfulLogin = function(a) {
        window.location.href = a.substr(1, a.length - 2)
    }
    ;
    a.successStartup = function() {}
    ;
    a.errorHandler = function(c) {
        a.ternOffWizard();
        "Blocked" == c || '"Blocked"' === c ? b.transitionTo("blocked") : b.transitionTo("error")
    }
    ;
    a.isLoginCorrect = function() {
        return void 0 != a.model.login ? a.model.login && 2 < a.model.login.length && 20 >= a.model.login.length : !1
    }
    ;
    a.isUnchanged = function() {
        return angular.equals(a.model, a._model)
    }
    ;
    a.onAliasSuccess = function(d) {
        a.updateModel();
        a.attrHolder.loginData = d;
        a.attrHolder.login =
        a.model.login;
        c.setWallpaper(d.wallpaperFilename);
        a.showWizard = !0;
        "A" === d.status ? b.transitionTo(d.authMethod) : "B" === d.status || "P" === d.status ? b.transitionTo("blocked") : "C" === d.status ? b.transitionTo("closed") : "S" === d.status && b.transitionTo("startup")
    }
    ;
    a.relogin = function() {
        a.reset();
        b.transitionTo("login")
    }
    ;
    a.editLogin = function() {
        a.attrHolder.socialData && (a.attrHolder.socialData = null ,
        a.attrHolder.disablePreauthorization = !0,
        a.attrHolder.loginData = null );
        b.transitionTo("login")
    }
    ;
    if (!0 != a.attrHolder.disablePreauthorization)
        g.onUserLogged(a,
        function(b, c) {
            var d = h.getUserData();
            d && a.defaultSocialProvider === c.provider && g.preauthorize(c.provider, d.id).then(function(b) {
                var c = b.data;
                c && c.authMethod && (a.onAliasSuccess(c, b.status, b.headers, b.config),
                a.attrHolder.socialData = d)
            }
            )
        }
        );
    a.updateModel();
    a.mostPopularCurrencyInfo = {};
    var i;
    e = e.getDictionaryAsArray("D_CSF_CURRENCIES", "basic");
    for (var j = 0, k = e.length; j < k; j++) {
        var l = e[j];
        if ("0" === l.basic) {
            i = l.code;
            break
        }
    }
    i && d.getArchiveExchangeRates(i).success(function(b) {
        var c = b.length
          , d = b[c - 1];
        b = d.nbAvgRate -
        b[c - 2].nbAvgRate;
        a.mostPopularCurrencyInfo = {
            currencyCode: i,
            lastExchangeRate: d,
            tendency: 0 < b ? "up" : 0 > b ? "down" : "fixed"
        }
    }
    ).error(function() {}
    );
    if (!a.locales || !a.locales[0])
        a.locales = f.getParameter("P_CSF_LOCALES").split(",").reverse();
    a.serviceUrl = encodeURIComponent(a.service)
}
]);
"use strict";
angular.module("commonFilters").filter("highlight", function() {
    return function(a, b) {
        return b ? ("" + a).replace(RegExp(b.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1"), "gi"), "\x3cstrong\x3e$\x26\x3c/strong\x3e") : a
    }
}
);
"use strict";
angular.module("commonServices").value("CACHE_CONFIG", {
    "default": {
        capacity: 15,
        maxAge: 15E3,
        deleteOnExpire: "passive",
        cacheFlushInterval: null
    },
    paymentsService: {
        capacity: 15,
        maxAge: 15E3,
        deleteOnExpire: "passive",
        cacheFlushInterval: null
    },
    payeesService: {
        capacity: 15,
        maxAge: 18E5,
        deleteOnExpire: "passive",
        cacheFlushInterval: null
    },
    accountsService: {
        capacity: 15,
        maxAge: 15E3,
        deleteOnExpire: "passive",
        cacheFlushInterval: null
    },
    transactionsService: {
        capacity: 15,
        maxAge: 15E3,
        deleteOnExpire: "passive",
        cacheFlushInterval: null
    },
    communicationService: {
        capacity: 15,
        maxAge: 15E3,
        deleteOnExpire: "passive",
        cacheFlushInterval: null
    },
    foreignBanksService: {
        capacity: 15,
        maxAge: 18E5,
        deleteOnExpire: "passive",
        cacheFlushInterval: null
    },
    cardsService: {
        capacity: 15,
        maxAge: 36E4,
        deleteOnExpire: "passive",
        cacheFlushInterval: null
    }
}).factory("httpCache", ["$log", "$angularCacheFactory", "CACHE_CONFIG", function(a, b, c) {
    var d = {};
    return {
        get: function(a, b) {
            void 0 === b && (b = "default");
            return void 0 === d[b] ? void 0 : d[b].get(a)
        },
        put: function(e, f, g) {
            void 0 === f && (f = "default");
            if (void 0 === d[f]) {
                var h = f, i = f, j;
                j = f;
                void 0 === c[j] ? (a.debug("[httpCache][getCacheConfig]Using default cache config for region: " + j),
                j = c["default"]) : j = c[j];
                d[h] = b(i, j)
            }
            d[f].put(e, g)
        },
        remove: function(b, c) {
            a.debug("[httpCache][remove]Removing " + c);
            void 0 !== d[b] && d[b].remove(c)
        },
        removeAll: function(b) {
            a.debug("[httpCache][removeAll]Removing all from region " + b);
            void 0 !== d[b] && d[b].removeAll()
        },
        getRegionData: function(a) {
            void 0 === a && (a = "default");
            return d[a]
        }
    }
}
]);
"use strict";
angular.module("commonServices").value("CACHE_CONFIG", {
    "default": {
        capacity: 15,
        maxAge: 15E3,
        deleteOnExpire: "passive",
        cacheFlushInterval: null
    },
    paymentsService: {
        capacity: 15,
        maxAge: 15E3,
        deleteOnExpire: "passive",
        cacheFlushInterval: null
    },
    payeesService: {
        capacity: 15,
        maxAge: 18E5,
        deleteOnExpire: "passive",
        cacheFlushInterval: null
    },
    accountsService: {
        capacity: 15,
        maxAge: 15E3,
        deleteOnExpire: "passive",
        cacheFlushInterval: null
    },
    transactionsService: {
        capacity: 15,
        maxAge: 15E3,
        deleteOnExpire: "passive",
        cacheFlushInterval: null
    },
    communicationService: {
        capacity: 15,
        maxAge: 15E3,
        deleteOnExpire: "passive",
        cacheFlushInterval: null
    },
    foreignBanksService: {
        capacity: 15,
        maxAge: 18E5,
        deleteOnExpire: "passive",
        cacheFlushInterval: null
    },
    cardsService: {
        capacity: 15,
        maxAge: 36E4,
        deleteOnExpire: "passive",
        cacheFlushInterval: null
    },
    contracts: {
        capacity: 15,
        maxAge: 18E4,
        deleteOnExpire: "passive",
        cacheFlushInterval: null
    }
});
"use strict";
angular.module("commonServices").factory("httpService", ["$http", "httpCache", "$log", "csfUtils", "$filter", "$q", "$rootScope", "dateUtils", "getDataByDateRangeService", function(a, b, c, d, e, f, g, h, i) {
    function j(b) {
        c.debug(m + "[httpService][" + b.method + "] " + b.url);
        return "GET" === b.method.toUpperCase() ? j.get(b.url, b.region) : a(b)
    }
    function k(d, e, f, g) {
        var h = !1 !== f ? b.get(d, e) : void 0
          , i = {};
        i[o] = g;
        if (void 0 === h)
            return c.debug(m + "[get]" + d + " from server"),
            g = a.get(d, {
                headers: i
            }).error(function() {
                b.remove(e, d)
            }
            ),
            !1 !== f && b.put(d,
            e, g),
            g;
        c.debug(m + "[get]" + d + " from cache");
        return h
    }
    function l(a, c, d, e, g) {
        angular.isDefined(g) || (g = f.defer());
        var h = i.buildUrl(a, c, d);
        k(h, e).then(function(b) {
            var d = i.prepareCachedDataObject(b.data, a, c);
            g.resolve(i.prepareResolvedDataObject(d, b))
        }
        , function(a) {
            g.reject(a);
            b.remove(e, h)
        }
        );
        b.put(h, e, g.promise);
        return g.promise
    }
    function n(a, c, d, g, h, i) {
        var j = f.defer();
        a.then(function(a) {
            a = {
                data: e("dateFilter")(a.data, c, d, i.dateProperty, !0),
                status: a.status,
                headers: a.headers,
                config: a.config
            };
            j.resolve(a)
        }
        ,
        function(a) {
            j.reject(a);
            b.remove(h, g)
        }
        );
        b.put(g, h, j.promise);
        return j
    }
    var m = "[HttpService]"
      , o = "Timer-Request";
    j.get = function(a, b, c, d) {
        return k(a, b, c, d)
    }
    ;
    j.getDataByDateRange = function(a, d, g, h, j) {
        if (!g)
            throw "No url defined";
        if (!h)
            throw "No configKey defined";
        var k = i.buildUrl(a, d, g)
          , n = b.get(k, h);
        if (void 0 === n) {
            k = b.getRegionData(h);
            if (void 0 === k || 0 === k.keys().length)
                return l(a, d, g, h);
            c.debug("httpService.resolveDataFromCachedPromises Returning from cache for: ", h, "keys: ", k.keys(), "cache info: ", k.info());
            var o = f.defer()
              , k = i.prepareListOfCachedRegionPromise(k, g);
            0 < k.length ? (f.all(k).then(function(b) {
                for (var f = !0, k = 0, m = b.length; k < m; k++) {
                    var n = b[k];
                    if (i.hasResponseDataToFilter(n, a, d)) {
                        b = e("dateFilter")(n.data.list, a, d, j, !0);
                        c.debug("httpService.resolveDataFromCachedPromises. Returning filteredData using cache with parameters: ", n.requestAttributes);
                        b || (b = []);
                        b = i.prepareCachedDataObject(b, a, d);
                        o.resolve(i.prepareResolvedDataObject(b, n));
                        f = !1;
                        break
                    }
                }
                f && (o = l(a, d, g, h, o))
            }
            ),
            k = o.promise) : k = l(a, d, g, h, o);
            return k
        }
        c.debug(m +
        "[getDataByDateRange]Returning from cache for url: " + k);
        return n
    }
    ;
    j.getExtended = function(a, e, f, h) {
        if (!f)
            throw "No url defined";
        if (!h)
            throw "No configKey defined";
        if (!g.dataSizeConfiguration[h])
            throw "No configKey defined in dataSizeConfiguration";
        var i = f + "dateFrom:" + a + "dateTo:" + e
          , j = b.get(i, h);
        if (void 0 === j) {
            var j = g.dataSizeConfiguration[h]
              , l = g.dataSizeTypes.DEFAULT
              , o = d.getDateByMonthOffset(j.configurationMap.EXTENDED)
              , v = d.getDateByMonthOffset(j.configurationMap.DEFAULT)
              , p = d.getDateByMonthOffset(j.configurationMap.MEDIUM)
              ,
            z = d.getCurrentDate();
            v < z ? (c.log(a < v && a > o),
            !a || a < o ? l = g.dataSizeTypes.ALL : a < v && a >= p ? l = g.dataSizeTypes.MEDIUM : a < p && a >= o && (l = g.dataSizeTypes.EXTENDED)) : !e || e > o ? l = g.dataSizeTypes.ALL : e > v && e <= p ? l = g.dataSizeTypes.MEDIUM : e > p && e <= o && (l = g.dataSizeTypes.EXTENDED);
            f = f + (-1 !== f.indexOf("?") ? "\x26" : "?") + "dataSize\x3d" + l;
            l = b.get(f, h);
            if (void 0 === l)
                return f = k(f, h),
                n(f, a, e, i, h, j).promise;
            c.debug(m + "[getExtended]Returning from cache for: " + f);
            return n(l, a, e, i, h, j).promise
        }
        c.debug(m + "[getExtended]Returning from cache for url: " +
        i);
        return j
    }
    ;
    j.clearCache = function(a, d) {
        c.debug(m + "[clearCache] Region: " + a + " url: " + d);
        b.remove(a, d)
    }
    ;
    j.clearCacheRegion = function(a) {
        c.debug(m + "[clearCacheRegion] Region: " + a);
        b.removeAll(a)
    }
    ;
    (function(a) {
        angular.forEach(arguments, function(a) {
            j[a] = function(b, c) {
                return j(angular.extend(c || {}, {
                    method: a,
                    url: b
                }))
            }
        }
        )
    }
    )("delete", "head", "jsonp");
    (function(a) {
        angular.forEach(arguments, function(a) {
            j[a] = function(b, c, d) {
                return j(angular.extend(d || {}, {
                    method: a,
                    url: b,
                    data: c
                }))
            }
        }
        )
    }
    )("post", "put");
    return j
}
]);
angular.module("commonServices").service("locationsService", ["httpService", function(a) {
    this.getLocations = function() {
        return a.get("atmBranches", "Locations")
    }
}
]);
"use strict";
angular.module("commonServices").service("loggingService", ["httpService", function(a) {
    this.startLogging = function() {
        return a.get("dev/logs/start", null , !1)
    }
}
]);
"use strict";
angular.module("casControllers").controller("LoginBlockedCtrl", ["$scope", "$rootScope", "$state", "$route", "$http", "$location", "$window", function() {}
]);
"use strict";
angular.module("casControllers").controller("LoginCtrl", ["$scope", "$http", function(a, b) {
    a.submit = function() {
        b.post("loginAlias", a.model).success(a.onAliasSuccess).error(a.errorHandler)
    }
    ;
    null  !== a.newsId && $csfModal.show("news")
}
]);
"use strict";
angular.module("casControllers").controller("LoginErrorCtrl", ["$scope", "$rootScope", "$state", "$route", "$http", "$location", "$window", function() {}
]);
"use strict";
angular.module("casControllers").controller("LoginMaskCtrl", ["$scope", "$rootScope", "$state", "$route", "$http", "$location", "$window", "userContextService", function(a, b, c, d, e, f, g, h) {
    a.maskSplit = a.attrHolder.loginData.mask.split("");
    a.model.password = [];
    a.currentIndex = -1;
    a.updateModel();
    a.firstFocus = a.attrHolder.loginData.mask.indexOf("1");
    a.login = function() {
        for (var b = "", c = 0; c < a.model.password.length; c++)
            b += a.model.password[c];
        e.post("authenticate/m", {
            password: b,
            wallpaperFilename: h.getWallpaper()
        }).success(a.successfulLogin).error(function(b) {
            a.errorHandler(b)
        }
        )
    }
    ;
    a.getCurrentIndex = function(b) {
        1 == b && (-1 == a.currentIndex ? a.currentIndex = 0 : a.currentIndex++);
        return a.currentIndex
    }
}
]);
"use strict";
angular.module("casControllers").controller("LoginNewPasswordCtrl", ["$scope", "$rootScope", "$state", "$route", "$http", "$location", "$window", "userContextService", function(a, b, c, d, e, f, g, h) {
    a.login = function() {
        a.ternOffWizard();
        e.post("authenticate/n", {
            password: a.model.password,
            wallpaperFilename: h.getWallpaper()
        }).success(a.onNewPasswordSuccess).error(a.errorHandler)
    }
    ;
    a.onNewPasswordSuccess = function() {
        a.reset();
        c.transitionTo("login")
    }
}
]);
"use strict";
angular.module("casControllers").controller("LoginPasswordCtrl", ["$scope", "$rootScope", "$state", "$route", "$http", "$location", "$window", "userContextService", function(a, b, c, d, e, f, g, h) {
    a.login = function() {
        a.ternOffWizard();
        e.post("authenticate/p", {
            password: a.model.password,
            wallpaperFilename: h.getWallpaper()
        }).success(a.successfulLogin).error(function(b) {
            a.errorHandler(b)
        }
        )
    }
}
]);
"use strict";
angular.module("casControllers").controller("LoginStartupCtrl", ["$scope", "$rootScope", "$state", "$route", "$http", "$location", "$window", "userContextService", function(a, b, c, d, e, f, g, h) {
    a.showCaptcha = !1;
    a.reloadCaptcha = !1;
    a.login = function() {
        a.ternOffWizard();
        e.post("authenticate/to", {
            password: a.model.password,
            captcha: a.model.captcha,
            wallpaperFilename: h.getWallpaper()
        }).success(a.successfulLogin).error(function(b) {
            "Error" == b && a.errorHandler();
            a.model.password = "";
            a.model.captcha = "";
            a.showCaptcha = "true" ==
            b;
            a.showCaptcha && (a.reloadCaptcha = !a.reloadCaptcha);
            $("#password").focus()
        }
        )
    }
    ;
    a.getCaptcha = function() {
        return !0 == a.showCaptcha ? "captcha?" + a.reloadCaptcha : ""
    }
}
]);
"use strict";
angular.module("casControllers").controller("LoginTokenOTPCtrl", ["$scope", "$rootScope", "$state", "$route", "$http", "$location", "$window", "userContextService", "captchaService", function(a, b, c, d, e, f, g, h, i) {
    function j(b) {
        a.successfulLogin(b)
    }
    a.showCaptcha = !1;
    a.loging = !1;
    a.login = function() {
        a.loging || (a.loging = !0,
        a.ternOffWizard(),
        e.post("authenticate/to", {
            password: a.model.password,
            captcha: a.model.captcha,
            wallpaperFilename: h.getWallpaper()
        }).success(j).error(function(b) {
            "true" != b && '"true"' !== b && (a.showCaptcha =
            !1,
            a.errorHandler(b));
            a.model.password = "";
            a.model.captcha = "";
            a.showCaptcha = "true" == b || '"true"' === b;
            a.showCaptcha && i.reloadCaptcha();
            $("#password").focus();
            a.loging = !1
        }
        ))
    }
    ;
    a.getCaptcha = function() {
        return !0 == a.showCaptcha ? i.getCaptcha("login") : ""
    }
}
]);
"use strict";
angular.module("commonControllers").controller("MessageCtrl", ["$rootScope", "$scope", "$state", "userDialogService", "communicationService", "userFilesService", function(a, b, c, d, e, f) {
    f.clearUploadFilesContext(f.context.MESSAGE);
    b.newMessageModel = {
        type: "",
        category: "",
        content: "",
        subject: "",
        threadId: "",
        status: "OPEN",
        attachments: []
    };
    b.isThreadOpen = function() {
        return "OPEN" == b.newMessageModel.status
    }
    ;
    b.isNewMessage = function() {
        return !b.newMessageModel.threadId || "" == b.newMessageModel.threadId ? !0 : !1
    }
    ;
    b.back = function() {
        c.go("communication.messagesList")
    }
    ;
    b.send = function() {
        e.sendMessage(b.newMessageModel).success(function() {
            d.queueMessage({
                type: "success",
                code: "COMMUNICATION_NEWMESSAGE_SEND_OK"
            }, !0);
            e.invalidate();
            c.go("communication.messagesList")
        }
        ).error(function() {
            d.addMessage({
                type: "error",
                code: "COMMUNICATION_NEWMESSAGE_SEND_ERROR"
            }, !0)
        }
        )
    }
}
]);
"use strict";
angular.module("commonServices").service("messageService", ["httpService", "$q", function(a, b) {
    this.getMessage = function(c, d) {
        var e = b.defer();
        a.get("message?code\x3d" + c + "\x26arguments\x3d" + d).then(function(a) {
            e.resolve(a.data)
        }
        , function(a) {
            e.reject(a)
        }
        );
        return e.promise
    }
}
]);
"use strict";
angular.module("commonControllers").controller("ContactModalCtrl", ["$scope", "dictionaryProvider", "parametersProvider", "$csfModal", "$csfModalConfig", "$state", function(a, b, c, d, e, f) {
    b = b.getDictionaryAsArray("D_SOCIAL_MEDIA");
    a.hotLine = c.getParameter("P_HOTLINE_PHONE");
    a.bankName = c.getParameter("P_BANK_NAME");
    a.contactEmail = c.getParameter("P_CONTACT_EMAIL");
    a.newMessage = function() {
        e.getState("newMessage") ? d.show("newMessage") : (f.go("communication.message"),
        d.currentStateName && d.hide())
    }
    ;
    for (c = 0; c < b.length; c++)
        "FACEBOOK" ===
        b[c].code && (a.fbLink = b[c])
}
]).controller("SecurityModalCtrl", ["$scope", "dictionaryFilter", function(a, b) {
    a.parentName = "SECURITY_WIDGET";
    a.tiles = b(a.parentName)
}
]).controller("HelpModalCtrl", ["$scope", "dictionaryFilter", function(a, b) {
    a.parentName = "HELP_WIDGET";
    a.tiles = b(a.parentName)
}
]).controller("NewsModalCtrl", ["$rootScope", "$scope", "dictionaryFilter", "parametersProvider", "$location", function(a, b, c, d) {
    d = d.getParameter("P_WIDGET_NEWS_NUMBER");
    b.tilesOne = c("NEWS_WIDGET_ONE").slice(0, d);
    b.tilesTwo =
    c("NEWS_WIDGET_TWO").slice(0, d);
    b.tilesThree = c("NEWS_WIDGET_THREE").slice(0, d);
    b.tiles = [].concat(b.tilesOne, b.tilesTwo, b.tilesThree);
    b.defaultTileDetailsIndex = null ;
    c = 0;
    for (d = b.tiles.length; c < d; c++) {
        var e = b.tiles[c];
        e.direct_link = "newsId\x3d" + e.code;
        null  !== b.newsId && e.code === b.newsId && (b.defaultTileDetailsIndex = c)
    }
    a.newsId = null
}
]).factory("dictionaryFilter", ["dictionaryProvider", function(a) {
    var b = a.getDictionaryAsArray("D_WIDGETS", "order");
    return function(a, d) {
        var e = [];
        d = d || b;
        for (var f = 0; f < d.length; f++)
            a ===
            d[f].parent && e.push(d[f]);
        return e
    }
}
]);
"use strict";
angular.module("commonControllers").controller("NewMessageModalCtrl", ["$rootScope", "$scope", "$filter", "widgetService", "userFilesService", "$csfModal", "userDialogService", "dictionaryProvider", "captchaService", function(a, b, c, d, e, f, g, h, i) {
    function j() {
        b.messageCategories = [];
        b.messageCategories.push({
            code: null ,
            value: null ,
            value_before_login: null ,
            type: b.newMessageModel.type
        });
        for (var a in k)
            k[a].type === b.newMessageModel.type && b.messageCategories.push(k[a])
    }
    b.EMAIL_HOT_KEYS = [13, 32, 44, 59];
    var k = {};
    b.messageTypes =
    [];
    b.messageCategories = [];
    b.newMessageModel = d.getNewMessageModel();
    b.isNewMessage = function() {
        return !0
    }
    ;
    b.isThreadOpen = function() {
        return !0
    }
    ;
    b.showPlaceholder = function() {
        return !b.newMessageModel.category || "" === b.newMessageModel.category
    }
    ;
    b.changeMessageTypeCode = function(a) {
        b.newMessageModel.category = null ;
        b.newMessageModel.type = a;
        b.selectedCategoryTitle = !1;
        j()
    }
    ;
    b.changeMessageCategoryCode = function(a, c) {
        b.newMessageModel.category = a;
        b.selectedCategoryTitle = c
    }
    ;
    b.back = function() {
        f.show("contact")
    }
    ;
    b.send =
    function() {
        d.sendMessage(b.newMessageModel).then(function() {
            g.addMessage({
                type: "success",
                code: "COMMUNICATION_NEWMESSAGE_SEND_OK"
            }, !0);
            i.reloadCaptcha();
            b.newMessageModel = d.getNewMessageModel();
            b.newMessageForm.$setPristine();
            b.newMessageModel.type = b.messageTypes[0].code
        }
        , function() {
            b.newMessageModel.captcha = "";
            i.reloadCaptcha()
        }
        )
    }
    ;
    b.getCaptcha = function() {
        return i.getCaptcha("msg")
    }
    ;
    b.isValidEmail = function() {
        return "E" === b.shareType && 0 < b.modelForm.email.$viewValue.length && !1 === b.modelForm.email.$invalid
    }
    ;
    b.onAddressKeyPress = function() {
        if (b.isValidEmail())
            return b.addRecipient(b.address, b.address, b.address),
            b.address = "",
            !0
    }
    ;
    b.keepSelectedElementFirst = function(a) {
        return a.code === b.newMessageModel.type ? 0 : 1
    }
    ;
    b.messageTypes = h.getDictionaryAsArray("D_COMMUNICATION_TYPES");
    k = h.getDictionaryAsArray("D_COMMUNICATION_CATEGORIES");
    b.newMessageModel.type = b.messageTypes[0].code;
    j()
}
]);
"use strict";
angular.module("commonServices").provider("parametersProvider", function() {
    var a = {};
    this.setParameters = function(b) {
        a = b
    }
    ;
    this.$get = function() {
        return {
            getParameter: function(b) {
                return a[b]
            }
        }
    }
}
);
angular.module("commonDirectives").directive("placeholder", ["$timeout", function(a) {
    return {
        restrict: "A",
        link: function(b, c) {
            a(function() {
                c.placeholder({
                    customClass: "ie-placeholder"
                })
            }
            )
        }
    }
}
]);
"use strict";
angular.module("commonServices").factory("requestNotificationChannel", ["$rootScope", "$http", function(a, b) {
    return {
        requestStarted: function() {
            a.$broadcast("_START_REQUEST_")
        },
        requestEnded: function() {
            a.$broadcast("_END_REQUEST_")
        },
        onRequestStarted: function(a, b) {
            return a.$on("_START_REQUEST_", function() {
                b()
            }
            )
        },
        onRequestEnded: function(a, b) {
            return a.$on("_END_REQUEST_", function() {
                b()
            }
            )
        },
        allRequestsEnded: function() {
            a.$broadcast("_ALL_REQUESTS_ENDED_")
        },
        onAllRequestsEnded: function(a, d) {
            if (0 === b.pendingRequests.length)
                d();
            else
                return a.$on("_ALL_REQUESTS_ENDED_", function() {
                    d()
                }
                )
        }
    }
}
]);
angular.module("formatFilters").filter("account", [function() {
    return function(a, b) {
        var c = "";
        a && (c += a,
        b && (c += " " + b.code));
        return c
    }
}
]).filter("iban", [function() {
    return function(a) {
        return a
    }
}
]);
"use strict";
angular.module("social-module", ["socialConfig"]).run(["$rootScope", "$window", "social", "socialConfig", "facebook", function(a, b, c, d, e) {
    b.fbAsyncInit = function() {
        FB.init({
            appId: d.facebookAppId,
            channelUrl: "static/js/services/social/channel.html",
            version: "v2.2",
            status: !0,
            cookie: !0,
            oauth: !0,
            xfbml: !0
        });
        c.watchFacebookConnection();
        e.watchConnection()
    }
    ;
    b = document;
    a = b.getElementsByTagName("script")[0];
    b.getElementById("facebook-jssdk") || (b = b.createElement("script"),
    b.id = "facebook-jssdk",
    b.src = "//connect.facebook.net/en_US/sdk.js",
    a.parentNode.insertBefore(b, a))
}
]).service("social", ["$q", "$rootScope", function(a, b) {
    b.social = {
        facebook: {
            connection: {},
            user: null
        }
    };
    var c = function(a) {
        b.social[a].user = null
    }
    ;
    this.getLoginStatus = function() {
        var b = a.defer();
        FB.getLoginStatus(function(a) {
            b.notify(a);
            "connected" === a.status ? b.resolve(a) : b.reject(a)
        }
        );
        return b.promise
    }
    ;
    this.watchFacebookConnection = function() {
        FB.getLoginStatus(function(a) {
            "not_authorized" === a.status ? b.$apply(function() {
                b.$broadcast("_SOCIAL_USER_NOT_AUTHORIZED_", {
                    provider: "facebook"
                });
                c("facebook")
            }
            ) : b.$apply(function() {
                b.$broadcast("_SOCIAL_USER_LOGGED_OUT_", {
                    provider: "facebook"
                });
                c("facebook")
            }
            )
        }
        );
        FB.Event.subscribe("auth.authResponseChange", function(a) {
            b.social.facebook.connection = a;
            "connected" === a.status ? FB.api("/me", function(a) {
                a && (b.$apply(function() {
                    b.social.facebook.user = a;
                    b.$broadcast("_SOCIAL_USER_LOGGED_", {
                        provider: "facebook",
                        providerUserId: a.id
                    })
                }
                ),
                FB.api("/me/friends", function(a) {
                    a && a.data && b.$apply(function() {
                        b.social.facebook.user.friends = a.data
                    }
                    )
                }
                ))
            }
            ) : "not_authorized" ===
            a.status ? b.$apply(function() {
                b.$broadcast("_SOCIAL_USER_NOT_AUTHORIZED_", {
                    provider: "facebook"
                });
                c("facebook")
            }
            ) : b.$apply(function() {
                b.$broadcast("_SOCIAL_USER_LOGGED_OUT_", {
                    provider: "facebook"
                });
                c("facebook")
            }
            )
        }
        )
    }
}
]).service("socialMedia", ["$rootScope", "httpService", "userContextService", function(a, b, c) {
    this.notifyUserLogged = function(b) {
        a.$broadcast("_SOCIAL_MEDIA_USER_LOGGED_", {
            provider: b
        })
    }
    ;
    this.notifyUserLoggedOut = function(b) {
        a.$broadcast("_SOCIAL_MEDIA_USER_LOGGED_OUT_", {
            provider: b
        })
    }
    ;
    this.notifyUserNotAuthorized =
    function(b) {
        a.$broadcast("_SOCIAL_MEDIA_USER_NOT_AUTHORIZED_", {
            provider: b
        })
    }
    ;
    this.onUserLogged = function(a, b) {
        return a.$on("_SOCIAL_MEDIA_USER_LOGGED_", function(a, c) {
            b(a, c)
        }
        )
    }
    ;
    this.onUserPaired = function(a, b) {
        return a.$on("_SOCIAL_MEDIA_USER_PAIRED_", function(a, c) {
            b(a, c)
        }
        )
    }
    ;
    this.onUserLoggedOut = function(a, b) {
        return a.$on("_SOCIAL_MEDIA_USER_LOGGED_OUT_", function(a, c) {
            b(a, c)
        }
        )
    }
    ;
    this.onUserNotAuthorized = function(a, b) {
        return a.$on("_SOCIAL_MEDIA_USER_NOT_AUTHORIZED_", function(a, c) {
            b(a, c)
        }
        )
    }
    ;
    this.onUserUnpaired =
    function(a, b) {
        return a.$on("_SOCIAL_MEDIA_USER_UNPAIRED_", function(a, c) {
            b(a, c)
        }
        )
    }
    ;
    this.pair = function(d, e) {
        return b.post("social/pair", {
            provider: d,
            ident: e
        }).then(function() {
            c.setSocialUserData(e, d);
            a.$broadcast("_SOCIAL_MEDIA_USER_PAIRED_", {
                ident: e,
                provider: d
            })
        }
        )
    }
    ;
    this.unpair = function() {
        return b.post("social/unpair").then(function() {
            c.setSocialUserData(null , null );
            a.$broadcast("_SOCIAL_MEDIA_USER_UNPAIRED_")
        }
        )
    }
    ;
    this.preauthorize = function(a, c) {
        return b.post("loginSocial", {
            provider: a,
            ident: c
        })
    }
    ;
    this.isPaired =
    function(a, b) {
        var f = c.getSocialUserData();
        return f.id === a && f.provider === b
    }
}
]).service("facebook", ["$q", "socialMedia", "$log", function(a, b, c) {
    var d = this
      , e = null
      , f = "not_authorized";
    this.getProviderName = function() {
        return "facebook"
    }
    ;
    this.isConnected = function() {
        return "connected" === f
    }
    ;
    this.loadUserData = function() {
        var b = a.defer();
        c.info("[facebook] [loadUserData]");
        FB.api("/me", function(a) {
            c.debug("[facebook] [login]: FB.api(/me): response: ", a);
            a ? FB.api("/me/friends", function(d) {
                c.debug("[facebook] [login]: FB.api(/me): FB.api(/me/friends): response: ",
                d);
                d && d.data && (a.friends = d.data,
                e = a,
                b.resolve(a))
            }
            ) : (e = null ,
            b.reject(a))
        }
        );
        return b.promise
    }
    ;
    this.getUserData = function() {
        return e
    }
    ;
    this.login = function() {
        var b = a.defer();
        c.info("[facebook] [login]: FB.getLoginStatus");
        FB.login(function(a) {
            c.debug("[facebook] [login]: FB.getLoginStatus: FB.login: response: ", a);
            a.authResponse ? b.resolve(a) : b.reject(a)
        }
        , {
            scope: "user_friends"
        });
        return b.promise
    }
    ;
    this.revoke = function() {
        var b = a.defer();
        c.info("[facebook] [revoke]");
        FB.api("/me/permissions", "delete", function(a) {
            c.debug("[facebook] [revoke]: FB.api(/me/permissions, delete) - success");
            b.resolve(a);
            e = null ;
            f = "not_authorized"
        }
        );
        return b.promise
    }
    ;
    this.getLoginStatus = function() {
        var b = a.defer();
        c.info("[facebook] [getLoginStatus]");
        "undefined" == typeof FB ? b.reject() : FB.getLoginStatus(function(a) {
            b.notify(a);
            c.debug("[facebook] [getLoginStatus]: FB.getLoginStatus: response: ", a);
            f = a.status;
            "connected" === a.status ? b.resolve(a) : (b.reject(a),
            e = null )
        }
        );
        return b.promise
    }
    ;
    this.watchConnection = function() {
        c.info("[facebook] [watchConnection]");
        this.getLoginStatus().then(function(a) {
            d.loadUserData(a).then(function() {
                b.notifyUserLogged("facebook")
            }
            )
        }
        ,
        function(a) {
            "not_authorized" == a.status ? b.notifyUserNotAuthorized("facebook") : b.notifyUserLoggedOut("facebook")
        }
        , function() {
            FB.Event.subscribe("auth.authResponseChange", function(a) {
                c.debug("[facebook] [watchConnection]: FB.Event.subscribe: auth.authResponseChange", a.status);
                f = a.status;
                "connected" === a.status ? d.loadUserData(a).then(function() {
                    b.notifyUserLogged("facebook")
                }
                ) : "not_authorized" === a.status ? (e = null ,
                b.notifyUserNotAuthorized("facebook")) : (e = null ,
                b.notifyUserLoggedOut("facebook"))
            }
            )
        }
        )
    }
}
]).directive("csfFacebookFeed",
["parametersProvider", function(a) {
    return {
        restrict: "A",
        scope: {
            caption: "\x3d",
            description: "\x3d",
            picture: "\x3d"
        },
        templateUrl: "views/templates/csf-facebook-feed",
        replace: !0,
        link: function(b, c, d) {
            var e = a.getParameter("P_APP_URI");
            b.feed = function() {
                FB.ui({
                    method: "feed",
                    link: e + "?" + d.link,
                    caption: b.caption,
                    description: b.description,
                    picture: b.picture,
                    display: "popup"
                })
            }
        }
    }
}
]);
angular.module("sortFilter").value("dataSorter", {
    create: function(a, b) {
        var c = angular.extend(angular.copy(a), {
            isDefaultField: !0,
            isDefaultOrder: !0,
            isDefault: !0,
            sorter: b[a.field]
        });
        return {
            sort: function(d, e) {
                c.ascending = d === c.field ? !c.ascending : d === a.field ? a.ascending : !0;
                c.field = d;
                c.isDefaultField = a.field === d;
                c.isDefaultOrder = a.ascending === c.ascending;
                c.isDefault = c.isDefaultField && c.isDefaultOrder;
                c.sorter = b[e];
                return c
            },
            get: function() {
                return c
            }
        }
    }
}).filter("sortFilter", ["$filter", function(a) {
    return function(b,
    c) {
        if (!b || !c || c.isDefault)
            return b;
        var d = c.isDefaultField ? b : a(c.sorter)(b, c.field);
        return c.isDefaultField || !c.ascending ? d.concat([]).reverse() : d
    }
}
]).filter("stringSorter", [function() {
    return function(a, b) {
        if (!a || !b)
            return a;
        for (var c = [], d = 0; d < a.length; d++)
            c[d] = a[d];
        d = Object.prototype.toString;
        Object.prototype.toString = function() {
            return this[b]
        }
        ;
        c.sort();
        Object.prototype.toString = d;
        return c
    }
}
]).filter("numberSorter", [function() {
    return function(a, b) {
        if (!a || !b)
            return a;
        for (var c = [], d = 0; d < a.length; d++)
            c[d] =
            a[d];
        c.sort(function(a, c) {
            return a[b] - c[b]
        }
        );
        return c
    }
}
]);
"use strict";
angular.module("commonServices").service("timeProvider", ["bigDecimal", function(a) {
    var b = 0;
    this.setServerTime = function(c) {
        b = a.minus(c, (new Date).getTime())
    }
    ;
    this.getServerTime = function() {
        return a.plus((new Date).getTime(), b)
    }
}
]);
"use strict";
angular.module("commonFilters").filter("untrustedHtml", ["$sce", function(a) {
    return function(b) {
        return a.trustAsHtml(b)
    }
}
]);
"use strict";
angular.module("commonServices").provider("userContextService", function() {
    var a = {};
    this.$get = function() {
        return {
            getContext: function() {
                return angular.copy(a)
            },
            getAvatarId: function() {
                return a.avatarId
            },
            setAvatarId: function(b) {
                a.avatarId = b
            },
            setWallpaper: function(b) {
                a.wallpaperFileName = b
            },
            getWallpaper: function() {
                return a.wallpaperFileName
            },
            getSocialUserData: function() {
                return a.socialUserData
            },
            setSocialUserData: function(b, c) {
                a.socialUserData = {
                    id: b,
                    provider: c
                }
            },
            getSegment: function() {
                return a.segment
            },
            getUserContactPhone: function() {
                return a.userContactPhone
            },
            getQueryMaxResult: function() {
                return a.queryMaxResult
            },
            getUserCif: function() {
                return a.userCif
            }
        }
    }
    ;
    this.initializeUserContext = function(b) {
        a = b
    }
}
);
"use strict";
angular.module("commonServices").config(["$provide", function(a) {
    a.decorator("userContextService", ["$delegate", function(a) {
        a.getPackageType = function() {
            return a.getContext().packageType
        }
        ;
        return a
    }
    ])
}
]);
"use strict";
angular.module("commonServices").service("userDialogService", ["$log", "$rootScope", "messageService", "dictionaryProvider", "$timeout", "csfUtils", function(a, b, c, d, e, f) {
    function g(a) {
        a.replace && (a.viewValue = f.replaceInMessage(a.viewValue, a.replace))
    }
    b.userMesssages = [];
    b.queuedUserMesssages = [];
    b.closeAlert = function(a) {
        void 0 !== a ? b.userMesssages.splice(a, 1) : b.userMesssages.pop()
    }
    ;
    this.setMessageViewValue = function(a) {
        void 0 !== a.code && this.getAndSetViewValueFromServer(a)
    }
    ;
    this.getAndSetViewValueFromServer =
    function(a) {
        c.getMessage(a.code, a.arguments).then(function(b) {
            a.viewValue = b
        }
        )
    }
    ;
    this.setDictionaryMessageViewValue = function(b) {
        try {
            b.viewValue = d.getDictionary("D_MESSAGES")[b.code].MESSAGE
        } catch (c) {
            a.error(c),
            a.warn("No entry found in MESSAGES dictionary for code: " + b.code),
            b.type = "error",
            b.viewValue = "No entry found in MESSAGES dictionary for code: " + b.code
        }
        b.arguments && 0 < b.arguments.length && (b.viewValue = f.formatMessage(b.viewValue, b.arguments))
    }
    ;
    this.addMessage = function(a, c) {
        c && !this.checkTheSameMessage(a,
        b.userMesssages, !0) ? (this.setDictionaryMessageViewValue(a),
        g(a),
        b.userMesssages.unshift(a)) : !c && !this.checkTheSameMessage(a, b.userMesssages) && (this.setMessageViewValue(a),
        g(a),
        b.userMesssages.unshift(a))
    }
    ;
    this.setMessage = function(a, b) {
        this.resetMessages();
        this.addMessage(a, b)
    }
    ;
    this.queueMessage = function(a, c) {
        c && !this.checkTheSameMessage(a, b.queuedUserMesssages, !0) ? (this.setDictionaryMessageViewValue(a),
        g(a),
        b.queuedUserMesssages.unshift(a)) : !c && !this.checkTheSameMessage(a, b.queuedUserMesssages) &&
        (this.setMessageViewValue(a),
        g(a),
        b.queuedUserMesssages.unshift(a))
    }
    ;
    this.queueMessages = function(a, b) {
        for (var c = 0, d = a.length; c < d; c++)
            this.queueMessage(a[c], b)
    }
    ;
    this.checkTheSameMessage = function(a, b, c) {
        c = c ? "code" : "viewValue";
        if (b && a)
            for (var d = 0, e = b.length; d < e; d++) {
                if (b[d][c] === a[c])
                    return !0
            }
        else
            return !1
    }
    ;
    this.resetMessages = function() {
        b.userMesssages = []
    }
    ;
    this.forwardCurrentMessages = function() {
        b.queuedUserMesssages = b.userMesssages
    }
    ;
    this.popMessages = function() {
        for (var a = 0, c = b.userMesssages.length; a <
        c; a++) {
            var d = b.userMesssages[a];
            d.persist && b.queuedUserMesssages.unshift(d)
        }
        b.userMesssages = b.queuedUserMesssages;
        b.queuedUserMesssages = []
    }
    ;
    this.parseResponse = function(a) {
        try {
            return JSON.parse(a)
        } catch (b) {
            return console.warn("Exception thrown"),
            a
        }
    }
    ;
    this.handleExceptionMessages = function(a) {
        a = a.data.error ? a.data.error : this.parseResponse(a.data);
        this.addMessage({
            type: "error",
            persist: !0,
            viewValue: a
        })
    }
}
]);
"use strict";
angular.module("commonServices").service("userFilesService", ["Upload", "httpService", function(a, b) {
    function c(b, c, f, g) {
        c && (f = f + "?context\x3d" + c);
        return a.upload({
            url: f,
            fields: g,
            file: b
        })
    }
    this.context = {
        PAYEE: "PAYEE",
        APPLICATION: "APPLICATION",
        MESSAGE: "MESSAGE",
        USER_AVATAR: "USER_AVATAR",
        SAVINGS_GOAL: "SAVINGS_GOAL"
    };
    this.uploadFile = function(a, b, f) {
        return c(a, b, void 0 === f ? "userFiles/file" : f, {})
    }
    ;
    this.uploadSingleFile = function(a, b, f) {
        return c(a, b, void 0 === f ? "userFiles/singleFile" : f, {})
    }
    ;
    this.getFiles = function(a,
    c) {
        var f = "userFiles/files/" + a;
        c && b.clearCache("FILES_REGION", f);
        return b.get(f, "FILES_REGION")
    }
    ;
    this.deleteFile = function(a, c, f) {
        return b["delete"]((void 0 === f ? "userFiles/file" : f) + "/" + a + "?context\x3d" + c)
    }
    ;
    this.clearUploadFilesContext = function(a) {
        return b.post("userFiles/clearUploadFilesContext?context\x3d" + a)
    }
}
]);
"use strict";
angular.module("commonServices").service("validator", [function() {
    this.isEmpty = function(a) {
        if (!a || 0 === a.length)
            return !0;
        var b = 0, c;
        for (c in a) {
            b++;
            break
        }
        return 0 === b ? !0 : !1
    }
    ;
    this.isAnyEmpty = function(a) {
        for (var b = 0, c = a.length; b < c; b++)
            if (this.isEmpty(a[b]))
                return !0;
        return !1
    }
}
]);
"use strict";
angular.module("commonServices").service("widgetService", ["httpService", function(a) {
    this.sendMessage = function(b) {
        return a.post("contact/sendMessage", b)
    }
    ;
    this.getNewMessageModel = function() {
        return {
            type: null ,
            category: null ,
            content: null ,
            subject: null ,
            threadId: null ,
            attachments: [],
            captcha: null ,
            email: null ,
            phoneNumber: null
        }
    }
}
]);
"use strict";
angular.module("commonServices").config(["$provide", function(a) {
    a.decorator("widgetService", ["$delegate", function(a) {
        a.getNewMessageModel = function() {
            return {
                type: null ,
                category: null ,
                content: null ,
                subject: null ,
                threadId: null ,
                attachments: [],
                captcha: null ,
                email: null
            }
        }
        ;
        return a
    }
    ])
}
]);
